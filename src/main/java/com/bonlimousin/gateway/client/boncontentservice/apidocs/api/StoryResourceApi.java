/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bonlimousin.gateway.client.boncontentservice.apidocs.api;

import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.cloud.openfeign.SpringQueryMap;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.bonlimousin.gateway.client.boncontentservice.apidocs.model.StoryEntity;
import com.bonlimousin.gateway.client.boncontentservice.apidocs.querymap.StoryCriteria;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-07-04T00:04:26.742175+02:00[Europe/Stockholm]")

@Validated
@Api(value = "StoryResource", description = "the StoryResource API")
public interface StoryResourceApi {

    /**
     * GET /api/stories/count : countStories
     *
     * @param categoryEquals  (optional)
     * @param categoryIn  (optional, default to new ArrayList&lt;&gt;())
     * @param categoryNotEquals  (optional)
     * @param categoryNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param categorySpecified  (optional)
     * @param fragmentIdEquals  (optional)
     * @param fragmentIdGreaterThan  (optional)
     * @param fragmentIdGreaterThanOrEqual  (optional)
     * @param fragmentIdIn  (optional, default to new ArrayList&lt;&gt;())
     * @param fragmentIdLessThan  (optional)
     * @param fragmentIdLessThanOrEqual  (optional)
     * @param fragmentIdNotEquals  (optional)
     * @param fragmentIdNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param fragmentIdSpecified  (optional)
     * @param idEquals  (optional)
     * @param idGreaterThan  (optional)
     * @param idGreaterThanOrEqual  (optional)
     * @param idIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idLessThan  (optional)
     * @param idLessThanOrEqual  (optional)
     * @param idNotEquals  (optional)
     * @param idNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idSpecified  (optional)
     * @param nameContains  (optional)
     * @param nameDoesNotContain  (optional)
     * @param nameEquals  (optional)
     * @param nameIn  (optional, default to new ArrayList&lt;&gt;())
     * @param nameNotEquals  (optional)
     * @param nameNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param nameSpecified  (optional)
     * @param visibilityEquals  (optional)
     * @param visibilityIn  (optional, default to new ArrayList&lt;&gt;())
     * @param visibilityNotEquals  (optional)
     * @param visibilityNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param visibilitySpecified  (optional)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "countStories", nickname = "countStoriesUsingGET", notes = "", response = Long.class, tags={ "story-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Long.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/stories/count",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Long> countStoriesUsingGET(@ApiParam(value = "", allowableValues = "NEWS, MATRILINEALITY, CATTLE, IT") @Valid @RequestParam(value = "category.equals", required = false) String categoryEquals,@ApiParam(value = "", allowableValues = "NEWS, MATRILINEALITY, CATTLE, IT") @Valid @RequestParam(value = "category.in", required = false) List<String> categoryIn,@ApiParam(value = "", allowableValues = "NEWS, MATRILINEALITY, CATTLE, IT") @Valid @RequestParam(value = "category.notEquals", required = false) String categoryNotEquals,@ApiParam(value = "", allowableValues = "NEWS, MATRILINEALITY, CATTLE, IT") @Valid @RequestParam(value = "category.notIn", required = false) List<String> categoryNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "category.specified", required = false) Boolean categorySpecified,@ApiParam(value = "") @Valid @RequestParam(value = "fragmentId.equals", required = false) Long fragmentIdEquals,@ApiParam(value = "") @Valid @RequestParam(value = "fragmentId.greaterThan", required = false) Long fragmentIdGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "fragmentId.greaterThanOrEqual", required = false) Long fragmentIdGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "fragmentId.in", required = false) List<Long> fragmentIdIn,@ApiParam(value = "") @Valid @RequestParam(value = "fragmentId.lessThan", required = false) Long fragmentIdLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "fragmentId.lessThanOrEqual", required = false) Long fragmentIdLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "fragmentId.notEquals", required = false) Long fragmentIdNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "fragmentId.notIn", required = false) List<Long> fragmentIdNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "fragmentId.specified", required = false) Boolean fragmentIdSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "id.equals", required = false) Long idEquals,@ApiParam(value = "") @Valid @RequestParam(value = "id.greaterThan", required = false) Long idGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "id.greaterThanOrEqual", required = false) Long idGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "id.in", required = false) List<Long> idIn,@ApiParam(value = "") @Valid @RequestParam(value = "id.lessThan", required = false) Long idLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "id.lessThanOrEqual", required = false) Long idLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "id.notEquals", required = false) Long idNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "id.notIn", required = false) List<Long> idNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "id.specified", required = false) Boolean idSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "name.contains", required = false) String nameContains,@ApiParam(value = "") @Valid @RequestParam(value = "name.doesNotContain", required = false) String nameDoesNotContain,@ApiParam(value = "") @Valid @RequestParam(value = "name.equals", required = false) String nameEquals,@ApiParam(value = "") @Valid @RequestParam(value = "name.in", required = false) List<String> nameIn,@ApiParam(value = "") @Valid @RequestParam(value = "name.notEquals", required = false) String nameNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "name.notIn", required = false) List<String> nameNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "name.specified", required = false) Boolean nameSpecified,@ApiParam(value = "", allowableValues = "ROLE_ADMIN, ROLE_USER, ROLE_ANONYMOUS") @Valid @RequestParam(value = "visibility.equals", required = false) String visibilityEquals,@ApiParam(value = "", allowableValues = "ROLE_ADMIN, ROLE_USER, ROLE_ANONYMOUS") @Valid @RequestParam(value = "visibility.in", required = false) List<String> visibilityIn,@ApiParam(value = "", allowableValues = "ROLE_ADMIN, ROLE_USER, ROLE_ANONYMOUS") @Valid @RequestParam(value = "visibility.notEquals", required = false) String visibilityNotEquals,@ApiParam(value = "", allowableValues = "ROLE_ADMIN, ROLE_USER, ROLE_ANONYMOUS") @Valid @RequestParam(value = "visibility.notIn", required = false) List<String> visibilityNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "visibility.specified", required = false) Boolean visibilitySpecified);


    /**
     * POST /api/stories : createStory
     *
     * @param storyEntity storyEntity (required)
     * @return OK (status code 200)
     *         or Created (status code 201)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "createStory", nickname = "createStoryUsingPOST", notes = "", response = StoryEntity.class, tags={ "story-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = StoryEntity.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/stories",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<StoryEntity> createStoryUsingPOST(@ApiParam(value = "storyEntity" ,required=true )  @Valid @RequestBody StoryEntity storyEntity);


    /**
     * DELETE /api/stories/{id} : deleteStory
     *
     * @param id id (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @ApiOperation(value = "deleteStory", nickname = "deleteStoryUsingDELETE", notes = "", tags={ "story-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/api/stories/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteStoryUsingDELETE(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    /**
     * GET /api/stories : getAllStories
     *
     * @param categoryEquals  (optional)
     * @param categoryIn  (optional, default to new ArrayList&lt;&gt;())
     * @param categoryNotEquals  (optional)
     * @param categoryNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param categorySpecified  (optional)
     * @param fragmentIdEquals  (optional)
     * @param fragmentIdGreaterThan  (optional)
     * @param fragmentIdGreaterThanOrEqual  (optional)
     * @param fragmentIdIn  (optional, default to new ArrayList&lt;&gt;())
     * @param fragmentIdLessThan  (optional)
     * @param fragmentIdLessThanOrEqual  (optional)
     * @param fragmentIdNotEquals  (optional)
     * @param fragmentIdNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param fragmentIdSpecified  (optional)
     * @param idEquals  (optional)
     * @param idGreaterThan  (optional)
     * @param idGreaterThanOrEqual  (optional)
     * @param idIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idLessThan  (optional)
     * @param idLessThanOrEqual  (optional)
     * @param idNotEquals  (optional)
     * @param idNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idSpecified  (optional)
     * @param nameContains  (optional)
     * @param nameDoesNotContain  (optional)
     * @param nameEquals  (optional)
     * @param nameIn  (optional, default to new ArrayList&lt;&gt;())
     * @param nameNotEquals  (optional)
     * @param nameNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param nameSpecified  (optional)
     * @param page Page number of the requested page (optional)
     * @param size Size of a page (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional, default to new ArrayList&lt;&gt;())
     * @param visibilityEquals  (optional)
     * @param visibilityIn  (optional, default to new ArrayList&lt;&gt;())
     * @param visibilityNotEquals  (optional)
     * @param visibilityNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param visibilitySpecified  (optional)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "getAllStories", nickname = "getAllStoriesUsingGET", notes = "", response = StoryEntity.class, responseContainer = "List", tags={ "story-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = StoryEntity.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/stories",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<StoryEntity>> getAllStoriesUsingGET(@SpringQueryMap StoryCriteria criteria, @ApiParam(value = "Page number of the requested page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Size of a page") @Valid @RequestParam(value = "size", required = false) Integer size,@ApiParam(value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") @Valid @RequestParam(value = "sort", required = false) List<String> sort);


    /**
     * GET /api/stories/{id} : getStory
     *
     * @param id id (required)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "getStory", nickname = "getStoryUsingGET", notes = "", response = StoryEntity.class, tags={ "story-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = StoryEntity.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/stories/{id}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<StoryEntity> getStoryUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    /**
     * GET /api/_search/stories : searchStories
     *
     * @param query query (required)
     * @param page Page number of the requested page (optional)
     * @param size Size of a page (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional, default to new ArrayList&lt;&gt;())
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "searchStories", nickname = "searchStoriesUsingGET", notes = "", response = StoryEntity.class, responseContainer = "List", tags={ "story-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = StoryEntity.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/_search/stories",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<StoryEntity>> searchStoriesUsingGET(@NotNull @ApiParam(value = "query", required = true) @Valid @RequestParam(value = "query", required = true) String query,@ApiParam(value = "Page number of the requested page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Size of a page") @Valid @RequestParam(value = "size", required = false) Integer size,@ApiParam(value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") @Valid @RequestParam(value = "sort", required = false) List<String> sort);


    /**
     * PUT /api/stories : updateStory
     *
     * @param storyEntity storyEntity (required)
     * @return OK (status code 200)
     *         or Created (status code 201)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "updateStory", nickname = "updateStoryUsingPUT", notes = "", response = StoryEntity.class, tags={ "story-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = StoryEntity.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/stories",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<StoryEntity> updateStoryUsingPUT(@ApiParam(value = "storyEntity" ,required=true )  @Valid @RequestBody StoryEntity storyEntity);

}
