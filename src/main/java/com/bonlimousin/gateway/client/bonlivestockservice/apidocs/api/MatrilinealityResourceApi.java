/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bonlimousin.gateway.client.bonlivestockservice.apidocs.api;

import java.util.List;

import javax.validation.Valid;

import org.springframework.cloud.openfeign.SpringQueryMap;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.bonlimousin.gateway.client.bonlivestockservice.apidocs.model.MatrilinealityEntity;
import com.bonlimousin.gateway.client.bonlivestockservice.apidocs.querymap.MatrilinealityCriteria;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-07-03T23:56:19.029760+02:00[Europe/Stockholm]")

@Validated
@Api(value = "MatrilinealityResource", description = "the MatrilinealityResource API")
public interface MatrilinealityResourceApi {

    /**
     * GET /api/matrilinealities/count : countMatrilinealities
     *
     * @param cattleNameRegexPatternContains  (optional)
     * @param cattleNameRegexPatternDoesNotContain  (optional)
     * @param cattleNameRegexPatternEquals  (optional)
     * @param cattleNameRegexPatternIn  (optional, default to new ArrayList&lt;&gt;())
     * @param cattleNameRegexPatternNotEquals  (optional)
     * @param cattleNameRegexPatternNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param cattleNameRegexPatternSpecified  (optional)
     * @param countryContains  (optional)
     * @param countryDoesNotContain  (optional)
     * @param countryEquals  (optional)
     * @param countryIn  (optional, default to new ArrayList&lt;&gt;())
     * @param countryNotEquals  (optional)
     * @param countryNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param countrySpecified  (optional)
     * @param descriptionContains  (optional)
     * @param descriptionDoesNotContain  (optional)
     * @param descriptionEquals  (optional)
     * @param descriptionIn  (optional, default to new ArrayList&lt;&gt;())
     * @param descriptionNotEquals  (optional)
     * @param descriptionNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param descriptionSpecified  (optional)
     * @param earTagIdEquals  (optional)
     * @param earTagIdGreaterThan  (optional)
     * @param earTagIdGreaterThanOrEqual  (optional)
     * @param earTagIdIn  (optional, default to new ArrayList&lt;&gt;())
     * @param earTagIdLessThan  (optional)
     * @param earTagIdLessThanOrEqual  (optional)
     * @param earTagIdNotEquals  (optional)
     * @param earTagIdNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param earTagIdSpecified  (optional)
     * @param familynameContains  (optional)
     * @param familynameDoesNotContain  (optional)
     * @param familynameEquals  (optional)
     * @param familynameIn  (optional, default to new ArrayList&lt;&gt;())
     * @param familynameNotEquals  (optional)
     * @param familynameNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param familynameSpecified  (optional)
     * @param idEquals  (optional)
     * @param idGreaterThan  (optional)
     * @param idGreaterThanOrEqual  (optional)
     * @param idIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idLessThan  (optional)
     * @param idLessThanOrEqual  (optional)
     * @param idNotEquals  (optional)
     * @param idNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idSpecified  (optional)
     * @param nameContains  (optional)
     * @param nameDoesNotContain  (optional)
     * @param nameEquals  (optional)
     * @param nameIn  (optional, default to new ArrayList&lt;&gt;())
     * @param nameNotEquals  (optional)
     * @param nameNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param nameSpecified  (optional)
     * @param patriCountryContains  (optional)
     * @param patriCountryDoesNotContain  (optional)
     * @param patriCountryEquals  (optional)
     * @param patriCountryIn  (optional, default to new ArrayList&lt;&gt;())
     * @param patriCountryNotEquals  (optional)
     * @param patriCountryNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param patriCountrySpecified  (optional)
     * @param patriIdEquals  (optional)
     * @param patriIdGreaterThan  (optional)
     * @param patriIdGreaterThanOrEqual  (optional)
     * @param patriIdIn  (optional, default to new ArrayList&lt;&gt;())
     * @param patriIdLessThan  (optional)
     * @param patriIdLessThanOrEqual  (optional)
     * @param patriIdNotEquals  (optional)
     * @param patriIdNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param patriIdSpecified  (optional)
     * @param patriNameContains  (optional)
     * @param patriNameDoesNotContain  (optional)
     * @param patriNameEquals  (optional)
     * @param patriNameIn  (optional, default to new ArrayList&lt;&gt;())
     * @param patriNameNotEquals  (optional)
     * @param patriNameNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param patriNameSpecified  (optional)
     * @param polledEquals  (optional)
     * @param polledIn  (optional, default to new ArrayList&lt;&gt;())
     * @param polledNotEquals  (optional)
     * @param polledNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param polledSpecified  (optional)
     * @param storyHandleContains  (optional)
     * @param storyHandleDoesNotContain  (optional)
     * @param storyHandleEquals  (optional)
     * @param storyHandleIn  (optional, default to new ArrayList&lt;&gt;())
     * @param storyHandleNotEquals  (optional)
     * @param storyHandleNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param storyHandleSpecified  (optional)
     * @param visibilityEquals  (optional)
     * @param visibilityIn  (optional, default to new ArrayList&lt;&gt;())
     * @param visibilityNotEquals  (optional)
     * @param visibilityNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param visibilitySpecified  (optional)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "countMatrilinealities", nickname = "countMatrilinealitiesUsingGET", notes = "", response = Long.class, tags={ "matrilineality-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Long.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/matrilinealities/count",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Long> countMatrilinealitiesUsingGET(@ApiParam(value = "") @Valid @RequestParam(value = "cattleNameRegexPattern.contains", required = false) String cattleNameRegexPatternContains,@ApiParam(value = "") @Valid @RequestParam(value = "cattleNameRegexPattern.doesNotContain", required = false) String cattleNameRegexPatternDoesNotContain,@ApiParam(value = "") @Valid @RequestParam(value = "cattleNameRegexPattern.equals", required = false) String cattleNameRegexPatternEquals,@ApiParam(value = "") @Valid @RequestParam(value = "cattleNameRegexPattern.in", required = false) List<String> cattleNameRegexPatternIn,@ApiParam(value = "") @Valid @RequestParam(value = "cattleNameRegexPattern.notEquals", required = false) String cattleNameRegexPatternNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "cattleNameRegexPattern.notIn", required = false) List<String> cattleNameRegexPatternNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "cattleNameRegexPattern.specified", required = false) Boolean cattleNameRegexPatternSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "country.contains", required = false) String countryContains,@ApiParam(value = "") @Valid @RequestParam(value = "country.doesNotContain", required = false) String countryDoesNotContain,@ApiParam(value = "") @Valid @RequestParam(value = "country.equals", required = false) String countryEquals,@ApiParam(value = "") @Valid @RequestParam(value = "country.in", required = false) List<String> countryIn,@ApiParam(value = "") @Valid @RequestParam(value = "country.notEquals", required = false) String countryNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "country.notIn", required = false) List<String> countryNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "country.specified", required = false) Boolean countrySpecified,@ApiParam(value = "") @Valid @RequestParam(value = "description.contains", required = false) String descriptionContains,@ApiParam(value = "") @Valid @RequestParam(value = "description.doesNotContain", required = false) String descriptionDoesNotContain,@ApiParam(value = "") @Valid @RequestParam(value = "description.equals", required = false) String descriptionEquals,@ApiParam(value = "") @Valid @RequestParam(value = "description.in", required = false) List<String> descriptionIn,@ApiParam(value = "") @Valid @RequestParam(value = "description.notEquals", required = false) String descriptionNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "description.notIn", required = false) List<String> descriptionNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "description.specified", required = false) Boolean descriptionSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "earTagId.equals", required = false) Integer earTagIdEquals,@ApiParam(value = "") @Valid @RequestParam(value = "earTagId.greaterThan", required = false) Integer earTagIdGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "earTagId.greaterThanOrEqual", required = false) Integer earTagIdGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "earTagId.in", required = false) List<Integer> earTagIdIn,@ApiParam(value = "") @Valid @RequestParam(value = "earTagId.lessThan", required = false) Integer earTagIdLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "earTagId.lessThanOrEqual", required = false) Integer earTagIdLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "earTagId.notEquals", required = false) Integer earTagIdNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "earTagId.notIn", required = false) List<Integer> earTagIdNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "earTagId.specified", required = false) Boolean earTagIdSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "familyname.contains", required = false) String familynameContains,@ApiParam(value = "") @Valid @RequestParam(value = "familyname.doesNotContain", required = false) String familynameDoesNotContain,@ApiParam(value = "") @Valid @RequestParam(value = "familyname.equals", required = false) String familynameEquals,@ApiParam(value = "") @Valid @RequestParam(value = "familyname.in", required = false) List<String> familynameIn,@ApiParam(value = "") @Valid @RequestParam(value = "familyname.notEquals", required = false) String familynameNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "familyname.notIn", required = false) List<String> familynameNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "familyname.specified", required = false) Boolean familynameSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "id.equals", required = false) Long idEquals,@ApiParam(value = "") @Valid @RequestParam(value = "id.greaterThan", required = false) Long idGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "id.greaterThanOrEqual", required = false) Long idGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "id.in", required = false) List<Long> idIn,@ApiParam(value = "") @Valid @RequestParam(value = "id.lessThan", required = false) Long idLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "id.lessThanOrEqual", required = false) Long idLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "id.notEquals", required = false) Long idNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "id.notIn", required = false) List<Long> idNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "id.specified", required = false) Boolean idSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "name.contains", required = false) String nameContains,@ApiParam(value = "") @Valid @RequestParam(value = "name.doesNotContain", required = false) String nameDoesNotContain,@ApiParam(value = "") @Valid @RequestParam(value = "name.equals", required = false) String nameEquals,@ApiParam(value = "") @Valid @RequestParam(value = "name.in", required = false) List<String> nameIn,@ApiParam(value = "") @Valid @RequestParam(value = "name.notEquals", required = false) String nameNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "name.notIn", required = false) List<String> nameNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "name.specified", required = false) Boolean nameSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "patriCountry.contains", required = false) String patriCountryContains,@ApiParam(value = "") @Valid @RequestParam(value = "patriCountry.doesNotContain", required = false) String patriCountryDoesNotContain,@ApiParam(value = "") @Valid @RequestParam(value = "patriCountry.equals", required = false) String patriCountryEquals,@ApiParam(value = "") @Valid @RequestParam(value = "patriCountry.in", required = false) List<String> patriCountryIn,@ApiParam(value = "") @Valid @RequestParam(value = "patriCountry.notEquals", required = false) String patriCountryNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "patriCountry.notIn", required = false) List<String> patriCountryNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "patriCountry.specified", required = false) Boolean patriCountrySpecified,@ApiParam(value = "") @Valid @RequestParam(value = "patriId.equals", required = false) Integer patriIdEquals,@ApiParam(value = "") @Valid @RequestParam(value = "patriId.greaterThan", required = false) Integer patriIdGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "patriId.greaterThanOrEqual", required = false) Integer patriIdGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "patriId.in", required = false) List<Integer> patriIdIn,@ApiParam(value = "") @Valid @RequestParam(value = "patriId.lessThan", required = false) Integer patriIdLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "patriId.lessThanOrEqual", required = false) Integer patriIdLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "patriId.notEquals", required = false) Integer patriIdNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "patriId.notIn", required = false) List<Integer> patriIdNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "patriId.specified", required = false) Boolean patriIdSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "patriName.contains", required = false) String patriNameContains,@ApiParam(value = "") @Valid @RequestParam(value = "patriName.doesNotContain", required = false) String patriNameDoesNotContain,@ApiParam(value = "") @Valid @RequestParam(value = "patriName.equals", required = false) String patriNameEquals,@ApiParam(value = "") @Valid @RequestParam(value = "patriName.in", required = false) List<String> patriNameIn,@ApiParam(value = "") @Valid @RequestParam(value = "patriName.notEquals", required = false) String patriNameNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "patriName.notIn", required = false) List<String> patriNameNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "patriName.specified", required = false) Boolean patriNameSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "polled.equals", required = false) Boolean polledEquals,@ApiParam(value = "") @Valid @RequestParam(value = "polled.in", required = false) List<Boolean> polledIn,@ApiParam(value = "") @Valid @RequestParam(value = "polled.notEquals", required = false) Boolean polledNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "polled.notIn", required = false) List<Boolean> polledNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "polled.specified", required = false) Boolean polledSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "storyHandle.contains", required = false) String storyHandleContains,@ApiParam(value = "") @Valid @RequestParam(value = "storyHandle.doesNotContain", required = false) String storyHandleDoesNotContain,@ApiParam(value = "") @Valid @RequestParam(value = "storyHandle.equals", required = false) String storyHandleEquals,@ApiParam(value = "") @Valid @RequestParam(value = "storyHandle.in", required = false) List<String> storyHandleIn,@ApiParam(value = "") @Valid @RequestParam(value = "storyHandle.notEquals", required = false) String storyHandleNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "storyHandle.notIn", required = false) List<String> storyHandleNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "storyHandle.specified", required = false) Boolean storyHandleSpecified,@ApiParam(value = "", allowableValues = "ROLE_ADMIN, ROLE_USER, ROLE_ANONYMOUS") @Valid @RequestParam(value = "visibility.equals", required = false) String visibilityEquals,@ApiParam(value = "", allowableValues = "ROLE_ADMIN, ROLE_USER, ROLE_ANONYMOUS") @Valid @RequestParam(value = "visibility.in", required = false) List<String> visibilityIn,@ApiParam(value = "", allowableValues = "ROLE_ADMIN, ROLE_USER, ROLE_ANONYMOUS") @Valid @RequestParam(value = "visibility.notEquals", required = false) String visibilityNotEquals,@ApiParam(value = "", allowableValues = "ROLE_ADMIN, ROLE_USER, ROLE_ANONYMOUS") @Valid @RequestParam(value = "visibility.notIn", required = false) List<String> visibilityNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "visibility.specified", required = false) Boolean visibilitySpecified);


    /**
     * POST /api/matrilinealities : createMatrilineality
     *
     * @param matrilinealityEntity matrilinealityEntity (required)
     * @return OK (status code 200)
     *         or Created (status code 201)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "createMatrilineality", nickname = "createMatrilinealityUsingPOST", notes = "", response = MatrilinealityEntity.class, tags={ "matrilineality-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = MatrilinealityEntity.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/matrilinealities",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<MatrilinealityEntity> createMatrilinealityUsingPOST(@ApiParam(value = "matrilinealityEntity" ,required=true )  @Valid @RequestBody MatrilinealityEntity matrilinealityEntity);


    /**
     * DELETE /api/matrilinealities/{id} : deleteMatrilineality
     *
     * @param id id (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @ApiOperation(value = "deleteMatrilineality", nickname = "deleteMatrilinealityUsingDELETE", notes = "", tags={ "matrilineality-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/api/matrilinealities/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteMatrilinealityUsingDELETE(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    /**
     * GET /api/matrilinealities : getAllMatrilinealities
     *
     * @param cattleNameRegexPatternContains  (optional)
     * @param cattleNameRegexPatternDoesNotContain  (optional)
     * @param cattleNameRegexPatternEquals  (optional)
     * @param cattleNameRegexPatternIn  (optional, default to new ArrayList&lt;&gt;())
     * @param cattleNameRegexPatternNotEquals  (optional)
     * @param cattleNameRegexPatternNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param cattleNameRegexPatternSpecified  (optional)
     * @param countryContains  (optional)
     * @param countryDoesNotContain  (optional)
     * @param countryEquals  (optional)
     * @param countryIn  (optional, default to new ArrayList&lt;&gt;())
     * @param countryNotEquals  (optional)
     * @param countryNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param countrySpecified  (optional)
     * @param descriptionContains  (optional)
     * @param descriptionDoesNotContain  (optional)
     * @param descriptionEquals  (optional)
     * @param descriptionIn  (optional, default to new ArrayList&lt;&gt;())
     * @param descriptionNotEquals  (optional)
     * @param descriptionNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param descriptionSpecified  (optional)
     * @param earTagIdEquals  (optional)
     * @param earTagIdGreaterThan  (optional)
     * @param earTagIdGreaterThanOrEqual  (optional)
     * @param earTagIdIn  (optional, default to new ArrayList&lt;&gt;())
     * @param earTagIdLessThan  (optional)
     * @param earTagIdLessThanOrEqual  (optional)
     * @param earTagIdNotEquals  (optional)
     * @param earTagIdNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param earTagIdSpecified  (optional)
     * @param familynameContains  (optional)
     * @param familynameDoesNotContain  (optional)
     * @param familynameEquals  (optional)
     * @param familynameIn  (optional, default to new ArrayList&lt;&gt;())
     * @param familynameNotEquals  (optional)
     * @param familynameNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param familynameSpecified  (optional)
     * @param idEquals  (optional)
     * @param idGreaterThan  (optional)
     * @param idGreaterThanOrEqual  (optional)
     * @param idIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idLessThan  (optional)
     * @param idLessThanOrEqual  (optional)
     * @param idNotEquals  (optional)
     * @param idNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idSpecified  (optional)
     * @param nameContains  (optional)
     * @param nameDoesNotContain  (optional)
     * @param nameEquals  (optional)
     * @param nameIn  (optional, default to new ArrayList&lt;&gt;())
     * @param nameNotEquals  (optional)
     * @param nameNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param nameSpecified  (optional)
     * @param page Page number of the requested page (optional)
     * @param patriCountryContains  (optional)
     * @param patriCountryDoesNotContain  (optional)
     * @param patriCountryEquals  (optional)
     * @param patriCountryIn  (optional, default to new ArrayList&lt;&gt;())
     * @param patriCountryNotEquals  (optional)
     * @param patriCountryNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param patriCountrySpecified  (optional)
     * @param patriIdEquals  (optional)
     * @param patriIdGreaterThan  (optional)
     * @param patriIdGreaterThanOrEqual  (optional)
     * @param patriIdIn  (optional, default to new ArrayList&lt;&gt;())
     * @param patriIdLessThan  (optional)
     * @param patriIdLessThanOrEqual  (optional)
     * @param patriIdNotEquals  (optional)
     * @param patriIdNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param patriIdSpecified  (optional)
     * @param patriNameContains  (optional)
     * @param patriNameDoesNotContain  (optional)
     * @param patriNameEquals  (optional)
     * @param patriNameIn  (optional, default to new ArrayList&lt;&gt;())
     * @param patriNameNotEquals  (optional)
     * @param patriNameNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param patriNameSpecified  (optional)
     * @param polledEquals  (optional)
     * @param polledIn  (optional, default to new ArrayList&lt;&gt;())
     * @param polledNotEquals  (optional)
     * @param polledNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param polledSpecified  (optional)
     * @param size Size of a page (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional, default to new ArrayList&lt;&gt;())
     * @param storyHandleContains  (optional)
     * @param storyHandleDoesNotContain  (optional)
     * @param storyHandleEquals  (optional)
     * @param storyHandleIn  (optional, default to new ArrayList&lt;&gt;())
     * @param storyHandleNotEquals  (optional)
     * @param storyHandleNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param storyHandleSpecified  (optional)
     * @param visibilityEquals  (optional)
     * @param visibilityIn  (optional, default to new ArrayList&lt;&gt;())
     * @param visibilityNotEquals  (optional)
     * @param visibilityNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param visibilitySpecified  (optional)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "getAllMatrilinealities", nickname = "getAllMatrilinealitiesUsingGET", notes = "", response = MatrilinealityEntity.class, responseContainer = "List", tags={ "matrilineality-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = MatrilinealityEntity.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/matrilinealities",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<MatrilinealityEntity>> getAllMatrilinealitiesUsingGET(@SpringQueryMap MatrilinealityCriteria criteria, @ApiParam(value = "Page number of the requested page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Size of a page") @Valid @RequestParam(value = "size", required = false) Integer size,@ApiParam(value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") @Valid @RequestParam(value = "sort", required = false) List<String> sort);


    /**
     * GET /api/matrilinealities/{id} : getMatrilineality
     *
     * @param id id (required)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "getMatrilineality", nickname = "getMatrilinealityUsingGET", notes = "", response = MatrilinealityEntity.class, tags={ "matrilineality-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = MatrilinealityEntity.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/matrilinealities/{id}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<MatrilinealityEntity> getMatrilinealityUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    /**
     * PUT /api/matrilinealities : updateMatrilineality
     *
     * @param matrilinealityEntity matrilinealityEntity (required)
     * @return OK (status code 200)
     *         or Created (status code 201)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "updateMatrilineality", nickname = "updateMatrilinealityUsingPUT", notes = "", response = MatrilinealityEntity.class, tags={ "matrilineality-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = MatrilinealityEntity.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/matrilinealities",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<MatrilinealityEntity> updateMatrilinealityUsingPUT(@ApiParam(value = "matrilinealityEntity" ,required=true )  @Valid @RequestBody MatrilinealityEntity matrilinealityEntity);

}
