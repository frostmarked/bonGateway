/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bonlimousin.gateway.client.bonlivestockservice.apidocs.api;

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import com.bonlimousin.gateway.client.bonlivestockservice.apidocs.model.PastureEntity;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-07-03T23:56:19.029760+02:00[Europe/Stockholm]")

@Validated
@Api(value = "PastureResource", description = "the PastureResource API")
public interface PastureResourceApi {

    /**
     * GET /api/pastures/count : countPastures
     *
     * @param descriptionContains  (optional)
     * @param descriptionDoesNotContain  (optional)
     * @param descriptionEquals  (optional)
     * @param descriptionIn  (optional, default to new ArrayList&lt;&gt;())
     * @param descriptionNotEquals  (optional)
     * @param descriptionNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param descriptionSpecified  (optional)
     * @param idEquals  (optional)
     * @param idGreaterThan  (optional)
     * @param idGreaterThanOrEqual  (optional)
     * @param idIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idLessThan  (optional)
     * @param idLessThanOrEqual  (optional)
     * @param idNotEquals  (optional)
     * @param idNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idSpecified  (optional)
     * @param nameContains  (optional)
     * @param nameDoesNotContain  (optional)
     * @param nameEquals  (optional)
     * @param nameIn  (optional, default to new ArrayList&lt;&gt;())
     * @param nameNotEquals  (optional)
     * @param nameNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param nameSpecified  (optional)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "countPastures", nickname = "countPasturesUsingGET", notes = "", response = Long.class, tags={ "pasture-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Long.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/pastures/count",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Long> countPasturesUsingGET(@ApiParam(value = "") @Valid @RequestParam(value = "description.contains", required = false) String descriptionContains,@ApiParam(value = "") @Valid @RequestParam(value = "description.doesNotContain", required = false) String descriptionDoesNotContain,@ApiParam(value = "") @Valid @RequestParam(value = "description.equals", required = false) String descriptionEquals,@ApiParam(value = "") @Valid @RequestParam(value = "description.in", required = false) List<String> descriptionIn,@ApiParam(value = "") @Valid @RequestParam(value = "description.notEquals", required = false) String descriptionNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "description.notIn", required = false) List<String> descriptionNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "description.specified", required = false) Boolean descriptionSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "id.equals", required = false) Long idEquals,@ApiParam(value = "") @Valid @RequestParam(value = "id.greaterThan", required = false) Long idGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "id.greaterThanOrEqual", required = false) Long idGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "id.in", required = false) List<Long> idIn,@ApiParam(value = "") @Valid @RequestParam(value = "id.lessThan", required = false) Long idLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "id.lessThanOrEqual", required = false) Long idLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "id.notEquals", required = false) Long idNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "id.notIn", required = false) List<Long> idNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "id.specified", required = false) Boolean idSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "name.contains", required = false) String nameContains,@ApiParam(value = "") @Valid @RequestParam(value = "name.doesNotContain", required = false) String nameDoesNotContain,@ApiParam(value = "") @Valid @RequestParam(value = "name.equals", required = false) String nameEquals,@ApiParam(value = "") @Valid @RequestParam(value = "name.in", required = false) List<String> nameIn,@ApiParam(value = "") @Valid @RequestParam(value = "name.notEquals", required = false) String nameNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "name.notIn", required = false) List<String> nameNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "name.specified", required = false) Boolean nameSpecified);


    /**
     * POST /api/pastures : createPasture
     *
     * @param pastureEntity pastureEntity (required)
     * @return OK (status code 200)
     *         or Created (status code 201)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "createPasture", nickname = "createPastureUsingPOST", notes = "", response = PastureEntity.class, tags={ "pasture-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = PastureEntity.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/pastures",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<PastureEntity> createPastureUsingPOST(@ApiParam(value = "pastureEntity" ,required=true )  @Valid @RequestBody PastureEntity pastureEntity);


    /**
     * DELETE /api/pastures/{id} : deletePasture
     *
     * @param id id (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @ApiOperation(value = "deletePasture", nickname = "deletePastureUsingDELETE", notes = "", tags={ "pasture-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/api/pastures/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deletePastureUsingDELETE(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    /**
     * GET /api/pastures : getAllPastures
     *
     * @param descriptionContains  (optional)
     * @param descriptionDoesNotContain  (optional)
     * @param descriptionEquals  (optional)
     * @param descriptionIn  (optional, default to new ArrayList&lt;&gt;())
     * @param descriptionNotEquals  (optional)
     * @param descriptionNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param descriptionSpecified  (optional)
     * @param idEquals  (optional)
     * @param idGreaterThan  (optional)
     * @param idGreaterThanOrEqual  (optional)
     * @param idIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idLessThan  (optional)
     * @param idLessThanOrEqual  (optional)
     * @param idNotEquals  (optional)
     * @param idNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idSpecified  (optional)
     * @param nameContains  (optional)
     * @param nameDoesNotContain  (optional)
     * @param nameEquals  (optional)
     * @param nameIn  (optional, default to new ArrayList&lt;&gt;())
     * @param nameNotEquals  (optional)
     * @param nameNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param nameSpecified  (optional)
     * @param page Page number of the requested page (optional)
     * @param size Size of a page (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional, default to new ArrayList&lt;&gt;())
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "getAllPastures", nickname = "getAllPasturesUsingGET", notes = "", response = PastureEntity.class, responseContainer = "List", tags={ "pasture-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = PastureEntity.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/pastures",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<PastureEntity>> getAllPasturesUsingGET(@ApiParam(value = "") @Valid @RequestParam(value = "description.contains", required = false) String descriptionContains,@ApiParam(value = "") @Valid @RequestParam(value = "description.doesNotContain", required = false) String descriptionDoesNotContain,@ApiParam(value = "") @Valid @RequestParam(value = "description.equals", required = false) String descriptionEquals,@ApiParam(value = "") @Valid @RequestParam(value = "description.in", required = false) List<String> descriptionIn,@ApiParam(value = "") @Valid @RequestParam(value = "description.notEquals", required = false) String descriptionNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "description.notIn", required = false) List<String> descriptionNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "description.specified", required = false) Boolean descriptionSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "id.equals", required = false) Long idEquals,@ApiParam(value = "") @Valid @RequestParam(value = "id.greaterThan", required = false) Long idGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "id.greaterThanOrEqual", required = false) Long idGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "id.in", required = false) List<Long> idIn,@ApiParam(value = "") @Valid @RequestParam(value = "id.lessThan", required = false) Long idLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "id.lessThanOrEqual", required = false) Long idLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "id.notEquals", required = false) Long idNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "id.notIn", required = false) List<Long> idNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "id.specified", required = false) Boolean idSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "name.contains", required = false) String nameContains,@ApiParam(value = "") @Valid @RequestParam(value = "name.doesNotContain", required = false) String nameDoesNotContain,@ApiParam(value = "") @Valid @RequestParam(value = "name.equals", required = false) String nameEquals,@ApiParam(value = "") @Valid @RequestParam(value = "name.in", required = false) List<String> nameIn,@ApiParam(value = "") @Valid @RequestParam(value = "name.notEquals", required = false) String nameNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "name.notIn", required = false) List<String> nameNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "name.specified", required = false) Boolean nameSpecified,@ApiParam(value = "Page number of the requested page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Size of a page") @Valid @RequestParam(value = "size", required = false) Integer size,@ApiParam(value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") @Valid @RequestParam(value = "sort", required = false) List<String> sort);


    /**
     * GET /api/pastures/{id} : getPasture
     *
     * @param id id (required)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "getPasture", nickname = "getPastureUsingGET", notes = "", response = PastureEntity.class, tags={ "pasture-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = PastureEntity.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/pastures/{id}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<PastureEntity> getPastureUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    /**
     * PUT /api/pastures : updatePasture
     *
     * @param pastureEntity pastureEntity (required)
     * @return OK (status code 200)
     *         or Created (status code 201)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "updatePasture", nickname = "updatePastureUsingPUT", notes = "", response = PastureEntity.class, tags={ "pasture-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = PastureEntity.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/pastures",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<PastureEntity> updatePastureUsingPUT(@ApiParam(value = "pastureEntity" ,required=true )  @Valid @RequestBody PastureEntity pastureEntity);

}
