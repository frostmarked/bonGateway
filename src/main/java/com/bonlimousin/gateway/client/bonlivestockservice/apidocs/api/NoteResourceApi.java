/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bonlimousin.gateway.client.bonlivestockservice.apidocs.api;

import java.time.LocalDate;

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import com.bonlimousin.gateway.client.bonlivestockservice.apidocs.model.NoteEntity;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-07-03T23:56:19.029760+02:00[Europe/Stockholm]")

@Validated
@Api(value = "NoteResource", description = "the NoteResource API")
public interface NoteResourceApi {

    /**
     * GET /api/notes/count : countNotes
     *
     * @param actualDateEquals  (optional)
     * @param actualDateGreaterThan  (optional)
     * @param actualDateGreaterThanOrEqual  (optional)
     * @param actualDateIn0ChronologyCalendarType  (optional)
     * @param actualDateIn0ChronologyId  (optional)
     * @param actualDateIn0DayOfMonth  (optional)
     * @param actualDateIn0DayOfWeek  (optional)
     * @param actualDateIn0DayOfYear  (optional)
     * @param actualDateIn0Era  (optional)
     * @param actualDateIn0LeapYear  (optional)
     * @param actualDateIn0Month  (optional)
     * @param actualDateIn0MonthValue  (optional)
     * @param actualDateIn0Year  (optional)
     * @param actualDateLessThan  (optional)
     * @param actualDateLessThanOrEqual  (optional)
     * @param actualDateNotEquals  (optional)
     * @param actualDateNotIn0ChronologyCalendarType  (optional)
     * @param actualDateNotIn0ChronologyId  (optional)
     * @param actualDateNotIn0DayOfMonth  (optional)
     * @param actualDateNotIn0DayOfWeek  (optional)
     * @param actualDateNotIn0DayOfYear  (optional)
     * @param actualDateNotIn0Era  (optional)
     * @param actualDateNotIn0LeapYear  (optional)
     * @param actualDateNotIn0Month  (optional)
     * @param actualDateNotIn0MonthValue  (optional)
     * @param actualDateNotIn0Year  (optional)
     * @param actualDateSpecified  (optional)
     * @param categoryEquals  (optional)
     * @param categoryIn  (optional, default to new ArrayList&lt;&gt;())
     * @param categoryNotEquals  (optional)
     * @param categoryNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param categorySpecified  (optional)
     * @param cattleIdEquals  (optional)
     * @param cattleIdGreaterThan  (optional)
     * @param cattleIdGreaterThanOrEqual  (optional)
     * @param cattleIdIn  (optional, default to new ArrayList&lt;&gt;())
     * @param cattleIdLessThan  (optional)
     * @param cattleIdLessThanOrEqual  (optional)
     * @param cattleIdNotEquals  (optional)
     * @param cattleIdNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param cattleIdSpecified  (optional)
     * @param idEquals  (optional)
     * @param idGreaterThan  (optional)
     * @param idGreaterThanOrEqual  (optional)
     * @param idIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idLessThan  (optional)
     * @param idLessThanOrEqual  (optional)
     * @param idNotEquals  (optional)
     * @param idNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idSpecified  (optional)
     * @param noteContains  (optional)
     * @param noteDoesNotContain  (optional)
     * @param noteEquals  (optional)
     * @param noteIn  (optional, default to new ArrayList&lt;&gt;())
     * @param noteNotEquals  (optional)
     * @param noteNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param noteSpecified  (optional)
     * @param pastureIdEquals  (optional)
     * @param pastureIdGreaterThan  (optional)
     * @param pastureIdGreaterThanOrEqual  (optional)
     * @param pastureIdIn  (optional, default to new ArrayList&lt;&gt;())
     * @param pastureIdLessThan  (optional)
     * @param pastureIdLessThanOrEqual  (optional)
     * @param pastureIdNotEquals  (optional)
     * @param pastureIdNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param pastureIdSpecified  (optional)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "countNotes", nickname = "countNotesUsingGET", notes = "", response = Long.class, tags={ "note-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Long.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/notes/count",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Long> countNotesUsingGET(@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.equals", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) LocalDate actualDateEquals,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.greaterThan", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) LocalDate actualDateGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.greaterThanOrEqual", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) LocalDate actualDateGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.in[0].chronology.calendarType", required = false) String actualDateIn0ChronologyCalendarType,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.in[0].chronology.id", required = false) String actualDateIn0ChronologyId,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.in[0].dayOfMonth", required = false) Integer actualDateIn0DayOfMonth,@ApiParam(value = "", allowableValues = "MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY") @Valid @RequestParam(value = "actualDate.in[0].dayOfWeek", required = false) String actualDateIn0DayOfWeek,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.in[0].dayOfYear", required = false) Integer actualDateIn0DayOfYear,@ApiParam(value = "", allowableValues = "BCE, CE") @Valid @RequestParam(value = "actualDate.in[0].era", required = false) String actualDateIn0Era,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.in[0].leapYear", required = false) Boolean actualDateIn0LeapYear,@ApiParam(value = "", allowableValues = "JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER") @Valid @RequestParam(value = "actualDate.in[0].month", required = false) String actualDateIn0Month,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.in[0].monthValue", required = false) Integer actualDateIn0MonthValue,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.in[0].year", required = false) Integer actualDateIn0Year,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.lessThan", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) LocalDate actualDateLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.lessThanOrEqual", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) LocalDate actualDateLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.notEquals", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) LocalDate actualDateNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.notIn[0].chronology.calendarType", required = false) String actualDateNotIn0ChronologyCalendarType,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.notIn[0].chronology.id", required = false) String actualDateNotIn0ChronologyId,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.notIn[0].dayOfMonth", required = false) Integer actualDateNotIn0DayOfMonth,@ApiParam(value = "", allowableValues = "MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY") @Valid @RequestParam(value = "actualDate.notIn[0].dayOfWeek", required = false) String actualDateNotIn0DayOfWeek,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.notIn[0].dayOfYear", required = false) Integer actualDateNotIn0DayOfYear,@ApiParam(value = "", allowableValues = "BCE, CE") @Valid @RequestParam(value = "actualDate.notIn[0].era", required = false) String actualDateNotIn0Era,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.notIn[0].leapYear", required = false) Boolean actualDateNotIn0LeapYear,@ApiParam(value = "", allowableValues = "JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER") @Valid @RequestParam(value = "actualDate.notIn[0].month", required = false) String actualDateNotIn0Month,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.notIn[0].monthValue", required = false) Integer actualDateNotIn0MonthValue,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.notIn[0].year", required = false) Integer actualDateNotIn0Year,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.specified", required = false) Boolean actualDateSpecified,@ApiParam(value = "", allowableValues = "GENERAL, TREATMENT, HOOF_CARE, DEHORNING, PASTURE_CHANGE, PASTURE_PLANNED, WEIGHT, WEIGHING0, WEIGHING200, WEIGHING365, ALERT, TEMPER, ESTRUS, INSEMINATION") @Valid @RequestParam(value = "category.equals", required = false) String categoryEquals,@ApiParam(value = "", allowableValues = "GENERAL, TREATMENT, HOOF_CARE, DEHORNING, PASTURE_CHANGE, PASTURE_PLANNED, WEIGHT, WEIGHING0, WEIGHING200, WEIGHING365, ALERT, TEMPER, ESTRUS, INSEMINATION") @Valid @RequestParam(value = "category.in", required = false) List<String> categoryIn,@ApiParam(value = "", allowableValues = "GENERAL, TREATMENT, HOOF_CARE, DEHORNING, PASTURE_CHANGE, PASTURE_PLANNED, WEIGHT, WEIGHING0, WEIGHING200, WEIGHING365, ALERT, TEMPER, ESTRUS, INSEMINATION") @Valid @RequestParam(value = "category.notEquals", required = false) String categoryNotEquals,@ApiParam(value = "", allowableValues = "GENERAL, TREATMENT, HOOF_CARE, DEHORNING, PASTURE_CHANGE, PASTURE_PLANNED, WEIGHT, WEIGHING0, WEIGHING200, WEIGHING365, ALERT, TEMPER, ESTRUS, INSEMINATION") @Valid @RequestParam(value = "category.notIn", required = false) List<String> categoryNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "category.specified", required = false) Boolean categorySpecified,@ApiParam(value = "") @Valid @RequestParam(value = "cattleId.equals", required = false) Long cattleIdEquals,@ApiParam(value = "") @Valid @RequestParam(value = "cattleId.greaterThan", required = false) Long cattleIdGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "cattleId.greaterThanOrEqual", required = false) Long cattleIdGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "cattleId.in", required = false) List<Long> cattleIdIn,@ApiParam(value = "") @Valid @RequestParam(value = "cattleId.lessThan", required = false) Long cattleIdLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "cattleId.lessThanOrEqual", required = false) Long cattleIdLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "cattleId.notEquals", required = false) Long cattleIdNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "cattleId.notIn", required = false) List<Long> cattleIdNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "cattleId.specified", required = false) Boolean cattleIdSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "id.equals", required = false) Long idEquals,@ApiParam(value = "") @Valid @RequestParam(value = "id.greaterThan", required = false) Long idGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "id.greaterThanOrEqual", required = false) Long idGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "id.in", required = false) List<Long> idIn,@ApiParam(value = "") @Valid @RequestParam(value = "id.lessThan", required = false) Long idLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "id.lessThanOrEqual", required = false) Long idLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "id.notEquals", required = false) Long idNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "id.notIn", required = false) List<Long> idNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "id.specified", required = false) Boolean idSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "note.contains", required = false) String noteContains,@ApiParam(value = "") @Valid @RequestParam(value = "note.doesNotContain", required = false) String noteDoesNotContain,@ApiParam(value = "") @Valid @RequestParam(value = "note.equals", required = false) String noteEquals,@ApiParam(value = "") @Valid @RequestParam(value = "note.in", required = false) List<String> noteIn,@ApiParam(value = "") @Valid @RequestParam(value = "note.notEquals", required = false) String noteNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "note.notIn", required = false) List<String> noteNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "note.specified", required = false) Boolean noteSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "pastureId.equals", required = false) Long pastureIdEquals,@ApiParam(value = "") @Valid @RequestParam(value = "pastureId.greaterThan", required = false) Long pastureIdGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "pastureId.greaterThanOrEqual", required = false) Long pastureIdGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "pastureId.in", required = false) List<Long> pastureIdIn,@ApiParam(value = "") @Valid @RequestParam(value = "pastureId.lessThan", required = false) Long pastureIdLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "pastureId.lessThanOrEqual", required = false) Long pastureIdLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "pastureId.notEquals", required = false) Long pastureIdNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "pastureId.notIn", required = false) List<Long> pastureIdNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "pastureId.specified", required = false) Boolean pastureIdSpecified);


    /**
     * POST /api/notes : createNote
     *
     * @param noteEntity noteEntity (required)
     * @return OK (status code 200)
     *         or Created (status code 201)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "createNote", nickname = "createNoteUsingPOST", notes = "", response = NoteEntity.class, tags={ "note-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = NoteEntity.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/notes",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<NoteEntity> createNoteUsingPOST(@ApiParam(value = "noteEntity" ,required=true )  @Valid @RequestBody NoteEntity noteEntity);


    /**
     * DELETE /api/notes/{id} : deleteNote
     *
     * @param id id (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @ApiOperation(value = "deleteNote", nickname = "deleteNoteUsingDELETE", notes = "", tags={ "note-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/api/notes/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteNoteUsingDELETE(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    /**
     * GET /api/notes : getAllNotes
     *
     * @param actualDateEquals  (optional)
     * @param actualDateGreaterThan  (optional)
     * @param actualDateGreaterThanOrEqual  (optional)
     * @param actualDateIn0ChronologyCalendarType  (optional)
     * @param actualDateIn0ChronologyId  (optional)
     * @param actualDateIn0DayOfMonth  (optional)
     * @param actualDateIn0DayOfWeek  (optional)
     * @param actualDateIn0DayOfYear  (optional)
     * @param actualDateIn0Era  (optional)
     * @param actualDateIn0LeapYear  (optional)
     * @param actualDateIn0Month  (optional)
     * @param actualDateIn0MonthValue  (optional)
     * @param actualDateIn0Year  (optional)
     * @param actualDateLessThan  (optional)
     * @param actualDateLessThanOrEqual  (optional)
     * @param actualDateNotEquals  (optional)
     * @param actualDateNotIn0ChronologyCalendarType  (optional)
     * @param actualDateNotIn0ChronologyId  (optional)
     * @param actualDateNotIn0DayOfMonth  (optional)
     * @param actualDateNotIn0DayOfWeek  (optional)
     * @param actualDateNotIn0DayOfYear  (optional)
     * @param actualDateNotIn0Era  (optional)
     * @param actualDateNotIn0LeapYear  (optional)
     * @param actualDateNotIn0Month  (optional)
     * @param actualDateNotIn0MonthValue  (optional)
     * @param actualDateNotIn0Year  (optional)
     * @param actualDateSpecified  (optional)
     * @param categoryEquals  (optional)
     * @param categoryIn  (optional, default to new ArrayList&lt;&gt;())
     * @param categoryNotEquals  (optional)
     * @param categoryNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param categorySpecified  (optional)
     * @param cattleIdEquals  (optional)
     * @param cattleIdGreaterThan  (optional)
     * @param cattleIdGreaterThanOrEqual  (optional)
     * @param cattleIdIn  (optional, default to new ArrayList&lt;&gt;())
     * @param cattleIdLessThan  (optional)
     * @param cattleIdLessThanOrEqual  (optional)
     * @param cattleIdNotEquals  (optional)
     * @param cattleIdNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param cattleIdSpecified  (optional)
     * @param idEquals  (optional)
     * @param idGreaterThan  (optional)
     * @param idGreaterThanOrEqual  (optional)
     * @param idIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idLessThan  (optional)
     * @param idLessThanOrEqual  (optional)
     * @param idNotEquals  (optional)
     * @param idNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idSpecified  (optional)
     * @param noteContains  (optional)
     * @param noteDoesNotContain  (optional)
     * @param noteEquals  (optional)
     * @param noteIn  (optional, default to new ArrayList&lt;&gt;())
     * @param noteNotEquals  (optional)
     * @param noteNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param noteSpecified  (optional)
     * @param page Page number of the requested page (optional)
     * @param pastureIdEquals  (optional)
     * @param pastureIdGreaterThan  (optional)
     * @param pastureIdGreaterThanOrEqual  (optional)
     * @param pastureIdIn  (optional, default to new ArrayList&lt;&gt;())
     * @param pastureIdLessThan  (optional)
     * @param pastureIdLessThanOrEqual  (optional)
     * @param pastureIdNotEquals  (optional)
     * @param pastureIdNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param pastureIdSpecified  (optional)
     * @param size Size of a page (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional, default to new ArrayList&lt;&gt;())
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "getAllNotes", nickname = "getAllNotesUsingGET", notes = "", response = NoteEntity.class, responseContainer = "List", tags={ "note-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = NoteEntity.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/notes",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<NoteEntity>> getAllNotesUsingGET(@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.equals", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) LocalDate actualDateEquals,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.greaterThan", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) LocalDate actualDateGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.greaterThanOrEqual", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) LocalDate actualDateGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.in[0].chronology.calendarType", required = false) String actualDateIn0ChronologyCalendarType,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.in[0].chronology.id", required = false) String actualDateIn0ChronologyId,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.in[0].dayOfMonth", required = false) Integer actualDateIn0DayOfMonth,@ApiParam(value = "", allowableValues = "MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY") @Valid @RequestParam(value = "actualDate.in[0].dayOfWeek", required = false) String actualDateIn0DayOfWeek,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.in[0].dayOfYear", required = false) Integer actualDateIn0DayOfYear,@ApiParam(value = "", allowableValues = "BCE, CE") @Valid @RequestParam(value = "actualDate.in[0].era", required = false) String actualDateIn0Era,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.in[0].leapYear", required = false) Boolean actualDateIn0LeapYear,@ApiParam(value = "", allowableValues = "JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER") @Valid @RequestParam(value = "actualDate.in[0].month", required = false) String actualDateIn0Month,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.in[0].monthValue", required = false) Integer actualDateIn0MonthValue,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.in[0].year", required = false) Integer actualDateIn0Year,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.lessThan", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) LocalDate actualDateLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.lessThanOrEqual", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) LocalDate actualDateLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.notEquals", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) LocalDate actualDateNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.notIn[0].chronology.calendarType", required = false) String actualDateNotIn0ChronologyCalendarType,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.notIn[0].chronology.id", required = false) String actualDateNotIn0ChronologyId,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.notIn[0].dayOfMonth", required = false) Integer actualDateNotIn0DayOfMonth,@ApiParam(value = "", allowableValues = "MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY") @Valid @RequestParam(value = "actualDate.notIn[0].dayOfWeek", required = false) String actualDateNotIn0DayOfWeek,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.notIn[0].dayOfYear", required = false) Integer actualDateNotIn0DayOfYear,@ApiParam(value = "", allowableValues = "BCE, CE") @Valid @RequestParam(value = "actualDate.notIn[0].era", required = false) String actualDateNotIn0Era,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.notIn[0].leapYear", required = false) Boolean actualDateNotIn0LeapYear,@ApiParam(value = "", allowableValues = "JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER") @Valid @RequestParam(value = "actualDate.notIn[0].month", required = false) String actualDateNotIn0Month,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.notIn[0].monthValue", required = false) Integer actualDateNotIn0MonthValue,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.notIn[0].year", required = false) Integer actualDateNotIn0Year,@ApiParam(value = "") @Valid @RequestParam(value = "actualDate.specified", required = false) Boolean actualDateSpecified,@ApiParam(value = "", allowableValues = "GENERAL, TREATMENT, HOOF_CARE, DEHORNING, PASTURE_CHANGE, PASTURE_PLANNED, WEIGHT, WEIGHING0, WEIGHING200, WEIGHING365, ALERT, TEMPER, ESTRUS, INSEMINATION") @Valid @RequestParam(value = "category.equals", required = false) String categoryEquals,@ApiParam(value = "", allowableValues = "GENERAL, TREATMENT, HOOF_CARE, DEHORNING, PASTURE_CHANGE, PASTURE_PLANNED, WEIGHT, WEIGHING0, WEIGHING200, WEIGHING365, ALERT, TEMPER, ESTRUS, INSEMINATION") @Valid @RequestParam(value = "category.in", required = false) List<String> categoryIn,@ApiParam(value = "", allowableValues = "GENERAL, TREATMENT, HOOF_CARE, DEHORNING, PASTURE_CHANGE, PASTURE_PLANNED, WEIGHT, WEIGHING0, WEIGHING200, WEIGHING365, ALERT, TEMPER, ESTRUS, INSEMINATION") @Valid @RequestParam(value = "category.notEquals", required = false) String categoryNotEquals,@ApiParam(value = "", allowableValues = "GENERAL, TREATMENT, HOOF_CARE, DEHORNING, PASTURE_CHANGE, PASTURE_PLANNED, WEIGHT, WEIGHING0, WEIGHING200, WEIGHING365, ALERT, TEMPER, ESTRUS, INSEMINATION") @Valid @RequestParam(value = "category.notIn", required = false) List<String> categoryNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "category.specified", required = false) Boolean categorySpecified,@ApiParam(value = "") @Valid @RequestParam(value = "cattleId.equals", required = false) Long cattleIdEquals,@ApiParam(value = "") @Valid @RequestParam(value = "cattleId.greaterThan", required = false) Long cattleIdGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "cattleId.greaterThanOrEqual", required = false) Long cattleIdGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "cattleId.in", required = false) List<Long> cattleIdIn,@ApiParam(value = "") @Valid @RequestParam(value = "cattleId.lessThan", required = false) Long cattleIdLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "cattleId.lessThanOrEqual", required = false) Long cattleIdLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "cattleId.notEquals", required = false) Long cattleIdNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "cattleId.notIn", required = false) List<Long> cattleIdNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "cattleId.specified", required = false) Boolean cattleIdSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "id.equals", required = false) Long idEquals,@ApiParam(value = "") @Valid @RequestParam(value = "id.greaterThan", required = false) Long idGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "id.greaterThanOrEqual", required = false) Long idGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "id.in", required = false) List<Long> idIn,@ApiParam(value = "") @Valid @RequestParam(value = "id.lessThan", required = false) Long idLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "id.lessThanOrEqual", required = false) Long idLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "id.notEquals", required = false) Long idNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "id.notIn", required = false) List<Long> idNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "id.specified", required = false) Boolean idSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "note.contains", required = false) String noteContains,@ApiParam(value = "") @Valid @RequestParam(value = "note.doesNotContain", required = false) String noteDoesNotContain,@ApiParam(value = "") @Valid @RequestParam(value = "note.equals", required = false) String noteEquals,@ApiParam(value = "") @Valid @RequestParam(value = "note.in", required = false) List<String> noteIn,@ApiParam(value = "") @Valid @RequestParam(value = "note.notEquals", required = false) String noteNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "note.notIn", required = false) List<String> noteNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "note.specified", required = false) Boolean noteSpecified,@ApiParam(value = "Page number of the requested page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "") @Valid @RequestParam(value = "pastureId.equals", required = false) Long pastureIdEquals,@ApiParam(value = "") @Valid @RequestParam(value = "pastureId.greaterThan", required = false) Long pastureIdGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "pastureId.greaterThanOrEqual", required = false) Long pastureIdGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "pastureId.in", required = false) List<Long> pastureIdIn,@ApiParam(value = "") @Valid @RequestParam(value = "pastureId.lessThan", required = false) Long pastureIdLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "pastureId.lessThanOrEqual", required = false) Long pastureIdLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "pastureId.notEquals", required = false) Long pastureIdNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "pastureId.notIn", required = false) List<Long> pastureIdNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "pastureId.specified", required = false) Boolean pastureIdSpecified,@ApiParam(value = "Size of a page") @Valid @RequestParam(value = "size", required = false) Integer size,@ApiParam(value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") @Valid @RequestParam(value = "sort", required = false) List<String> sort);


    /**
     * GET /api/notes/{id} : getNote
     *
     * @param id id (required)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "getNote", nickname = "getNoteUsingGET", notes = "", response = NoteEntity.class, tags={ "note-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = NoteEntity.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/notes/{id}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<NoteEntity> getNoteUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    /**
     * PUT /api/notes : updateNote
     *
     * @param noteEntity noteEntity (required)
     * @return OK (status code 200)
     *         or Created (status code 201)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "updateNote", nickname = "updateNoteUsingPUT", notes = "", response = NoteEntity.class, tags={ "note-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = NoteEntity.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/notes",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<NoteEntity> updateNoteUsingPUT(@ApiParam(value = "noteEntity" ,required=true )  @Valid @RequestBody NoteEntity noteEntity);

}
