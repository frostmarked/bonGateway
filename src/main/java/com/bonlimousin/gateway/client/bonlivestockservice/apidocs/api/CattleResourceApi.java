/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bonlimousin.gateway.client.bonlivestockservice.apidocs.api;

import java.util.List;

import javax.validation.Valid;

import org.springframework.cloud.openfeign.SpringQueryMap;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.bonlimousin.gateway.client.bonlivestockservice.apidocs.model.CattleEntity;
import com.bonlimousin.gateway.client.bonlivestockservice.apidocs.querymap.CattleCriteria;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-07-03T23:56:19.029760+02:00[Europe/Stockholm]")

@Validated
@Api(value = "CattleResource", description = "the CattleResource API")
public interface CattleResourceApi {

    /**
     * GET /api/cattles/count : countCattles
     *
     * @param alertEquals  (optional)
     * @param alertIn  (optional, default to new ArrayList&lt;&gt;())
     * @param alertNotEquals  (optional)
     * @param alertNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param alertSpecified  (optional)
     * @param earTagIdEquals  (optional)
     * @param earTagIdGreaterThan  (optional)
     * @param earTagIdGreaterThanOrEqual  (optional)
     * @param earTagIdIn  (optional, default to new ArrayList&lt;&gt;())
     * @param earTagIdLessThan  (optional)
     * @param earTagIdLessThanOrEqual  (optional)
     * @param earTagIdNotEquals  (optional)
     * @param earTagIdNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param earTagIdSpecified  (optional)
     * @param idEquals  (optional)
     * @param idGreaterThan  (optional)
     * @param idGreaterThanOrEqual  (optional)
     * @param idIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idLessThan  (optional)
     * @param idLessThanOrEqual  (optional)
     * @param idNotEquals  (optional)
     * @param idNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idSpecified  (optional)
     * @param matrilinealityIdEquals  (optional)
     * @param matrilinealityIdGreaterThan  (optional)
     * @param matrilinealityIdGreaterThanOrEqual  (optional)
     * @param matrilinealityIdIn  (optional, default to new ArrayList&lt;&gt;())
     * @param matrilinealityIdLessThan  (optional)
     * @param matrilinealityIdLessThanOrEqual  (optional)
     * @param matrilinealityIdNotEquals  (optional)
     * @param matrilinealityIdNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param matrilinealityIdSpecified  (optional)
     * @param nameContains  (optional)
     * @param nameDoesNotContain  (optional)
     * @param nameEquals  (optional)
     * @param nameIn  (optional, default to new ArrayList&lt;&gt;())
     * @param nameNotEquals  (optional)
     * @param nameNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param nameSpecified  (optional)
     * @param noteIdEquals  (optional)
     * @param noteIdGreaterThan  (optional)
     * @param noteIdGreaterThanOrEqual  (optional)
     * @param noteIdIn  (optional, default to new ArrayList&lt;&gt;())
     * @param noteIdLessThan  (optional)
     * @param noteIdLessThanOrEqual  (optional)
     * @param noteIdNotEquals  (optional)
     * @param noteIdNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param noteIdSpecified  (optional)
     * @param photoIdEquals  (optional)
     * @param photoIdGreaterThan  (optional)
     * @param photoIdGreaterThanOrEqual  (optional)
     * @param photoIdIn  (optional, default to new ArrayList&lt;&gt;())
     * @param photoIdLessThan  (optional)
     * @param photoIdLessThanOrEqual  (optional)
     * @param photoIdNotEquals  (optional)
     * @param photoIdNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param photoIdSpecified  (optional)
     * @param showBlupEquals  (optional)
     * @param showBlupIn  (optional, default to new ArrayList&lt;&gt;())
     * @param showBlupNotEquals  (optional)
     * @param showBlupNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param showBlupSpecified  (optional)
     * @param storyHandleContains  (optional)
     * @param storyHandleDoesNotContain  (optional)
     * @param storyHandleEquals  (optional)
     * @param storyHandleIn  (optional, default to new ArrayList&lt;&gt;())
     * @param storyHandleNotEquals  (optional)
     * @param storyHandleNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param storyHandleSpecified  (optional)
     * @param upForSaleEquals  (optional)
     * @param upForSaleIn  (optional, default to new ArrayList&lt;&gt;())
     * @param upForSaleNotEquals  (optional)
     * @param upForSaleNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param upForSaleSpecified  (optional)
     * @param visibilityEquals  (optional)
     * @param visibilityIn  (optional, default to new ArrayList&lt;&gt;())
     * @param visibilityNotEquals  (optional)
     * @param visibilityNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param visibilitySpecified  (optional)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "countCattles", nickname = "countCattlesUsingGET", notes = "", response = Long.class, tags={ "cattle-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Long.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/cattles/count",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Long> countCattlesUsingGET(@ApiParam(value = "") @Valid @RequestParam(value = "alert.equals", required = false) Boolean alertEquals,@ApiParam(value = "") @Valid @RequestParam(value = "alert.in", required = false) List<Boolean> alertIn,@ApiParam(value = "") @Valid @RequestParam(value = "alert.notEquals", required = false) Boolean alertNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "alert.notIn", required = false) List<Boolean> alertNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "alert.specified", required = false) Boolean alertSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "earTagId.equals", required = false) Integer earTagIdEquals,@ApiParam(value = "") @Valid @RequestParam(value = "earTagId.greaterThan", required = false) Integer earTagIdGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "earTagId.greaterThanOrEqual", required = false) Integer earTagIdGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "earTagId.in", required = false) List<Integer> earTagIdIn,@ApiParam(value = "") @Valid @RequestParam(value = "earTagId.lessThan", required = false) Integer earTagIdLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "earTagId.lessThanOrEqual", required = false) Integer earTagIdLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "earTagId.notEquals", required = false) Integer earTagIdNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "earTagId.notIn", required = false) List<Integer> earTagIdNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "earTagId.specified", required = false) Boolean earTagIdSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "id.equals", required = false) Long idEquals,@ApiParam(value = "") @Valid @RequestParam(value = "id.greaterThan", required = false) Long idGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "id.greaterThanOrEqual", required = false) Long idGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "id.in", required = false) List<Long> idIn,@ApiParam(value = "") @Valid @RequestParam(value = "id.lessThan", required = false) Long idLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "id.lessThanOrEqual", required = false) Long idLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "id.notEquals", required = false) Long idNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "id.notIn", required = false) List<Long> idNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "id.specified", required = false) Boolean idSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "matrilinealityId.equals", required = false) Long matrilinealityIdEquals,@ApiParam(value = "") @Valid @RequestParam(value = "matrilinealityId.greaterThan", required = false) Long matrilinealityIdGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "matrilinealityId.greaterThanOrEqual", required = false) Long matrilinealityIdGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "matrilinealityId.in", required = false) List<Long> matrilinealityIdIn,@ApiParam(value = "") @Valid @RequestParam(value = "matrilinealityId.lessThan", required = false) Long matrilinealityIdLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "matrilinealityId.lessThanOrEqual", required = false) Long matrilinealityIdLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "matrilinealityId.notEquals", required = false) Long matrilinealityIdNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "matrilinealityId.notIn", required = false) List<Long> matrilinealityIdNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "matrilinealityId.specified", required = false) Boolean matrilinealityIdSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "name.contains", required = false) String nameContains,@ApiParam(value = "") @Valid @RequestParam(value = "name.doesNotContain", required = false) String nameDoesNotContain,@ApiParam(value = "") @Valid @RequestParam(value = "name.equals", required = false) String nameEquals,@ApiParam(value = "") @Valid @RequestParam(value = "name.in", required = false) List<String> nameIn,@ApiParam(value = "") @Valid @RequestParam(value = "name.notEquals", required = false) String nameNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "name.notIn", required = false) List<String> nameNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "name.specified", required = false) Boolean nameSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "noteId.equals", required = false) Long noteIdEquals,@ApiParam(value = "") @Valid @RequestParam(value = "noteId.greaterThan", required = false) Long noteIdGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "noteId.greaterThanOrEqual", required = false) Long noteIdGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "noteId.in", required = false) List<Long> noteIdIn,@ApiParam(value = "") @Valid @RequestParam(value = "noteId.lessThan", required = false) Long noteIdLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "noteId.lessThanOrEqual", required = false) Long noteIdLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "noteId.notEquals", required = false) Long noteIdNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "noteId.notIn", required = false) List<Long> noteIdNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "noteId.specified", required = false) Boolean noteIdSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "photoId.equals", required = false) Long photoIdEquals,@ApiParam(value = "") @Valid @RequestParam(value = "photoId.greaterThan", required = false) Long photoIdGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "photoId.greaterThanOrEqual", required = false) Long photoIdGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "photoId.in", required = false) List<Long> photoIdIn,@ApiParam(value = "") @Valid @RequestParam(value = "photoId.lessThan", required = false) Long photoIdLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "photoId.lessThanOrEqual", required = false) Long photoIdLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "photoId.notEquals", required = false) Long photoIdNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "photoId.notIn", required = false) List<Long> photoIdNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "photoId.specified", required = false) Boolean photoIdSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "showBlup.equals", required = false) Boolean showBlupEquals,@ApiParam(value = "") @Valid @RequestParam(value = "showBlup.in", required = false) List<Boolean> showBlupIn,@ApiParam(value = "") @Valid @RequestParam(value = "showBlup.notEquals", required = false) Boolean showBlupNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "showBlup.notIn", required = false) List<Boolean> showBlupNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "showBlup.specified", required = false) Boolean showBlupSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "storyHandle.contains", required = false) String storyHandleContains,@ApiParam(value = "") @Valid @RequestParam(value = "storyHandle.doesNotContain", required = false) String storyHandleDoesNotContain,@ApiParam(value = "") @Valid @RequestParam(value = "storyHandle.equals", required = false) String storyHandleEquals,@ApiParam(value = "") @Valid @RequestParam(value = "storyHandle.in", required = false) List<String> storyHandleIn,@ApiParam(value = "") @Valid @RequestParam(value = "storyHandle.notEquals", required = false) String storyHandleNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "storyHandle.notIn", required = false) List<String> storyHandleNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "storyHandle.specified", required = false) Boolean storyHandleSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "upForSale.equals", required = false) Boolean upForSaleEquals,@ApiParam(value = "") @Valid @RequestParam(value = "upForSale.in", required = false) List<Boolean> upForSaleIn,@ApiParam(value = "") @Valid @RequestParam(value = "upForSale.notEquals", required = false) Boolean upForSaleNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "upForSale.notIn", required = false) List<Boolean> upForSaleNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "upForSale.specified", required = false) Boolean upForSaleSpecified,@ApiParam(value = "", allowableValues = "ROLE_ADMIN, ROLE_USER, ROLE_ANONYMOUS") @Valid @RequestParam(value = "visibility.equals", required = false) String visibilityEquals,@ApiParam(value = "", allowableValues = "ROLE_ADMIN, ROLE_USER, ROLE_ANONYMOUS") @Valid @RequestParam(value = "visibility.in", required = false) List<String> visibilityIn,@ApiParam(value = "", allowableValues = "ROLE_ADMIN, ROLE_USER, ROLE_ANONYMOUS") @Valid @RequestParam(value = "visibility.notEquals", required = false) String visibilityNotEquals,@ApiParam(value = "", allowableValues = "ROLE_ADMIN, ROLE_USER, ROLE_ANONYMOUS") @Valid @RequestParam(value = "visibility.notIn", required = false) List<String> visibilityNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "visibility.specified", required = false) Boolean visibilitySpecified);


    /**
     * POST /api/cattles : createCattle
     *
     * @param cattleEntity cattleEntity (required)
     * @return OK (status code 200)
     *         or Created (status code 201)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "createCattle", nickname = "createCattleUsingPOST", notes = "", response = CattleEntity.class, tags={ "cattle-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CattleEntity.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/cattles",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<CattleEntity> createCattleUsingPOST(@ApiParam(value = "cattleEntity" ,required=true )  @Valid @RequestBody CattleEntity cattleEntity);


    /**
     * DELETE /api/cattles/{id} : deleteCattle
     *
     * @param id id (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @ApiOperation(value = "deleteCattle", nickname = "deleteCattleUsingDELETE", notes = "", tags={ "cattle-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/api/cattles/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteCattleUsingDELETE(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    /**
     * GET /api/cattles : getAllCattles
     *
     * @param alertEquals  (optional)
     * @param alertIn  (optional, default to new ArrayList&lt;&gt;())
     * @param alertNotEquals  (optional)
     * @param alertNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param alertSpecified  (optional)
     * @param earTagIdEquals  (optional)
     * @param earTagIdGreaterThan  (optional)
     * @param earTagIdGreaterThanOrEqual  (optional)
     * @param earTagIdIn  (optional, default to new ArrayList&lt;&gt;())
     * @param earTagIdLessThan  (optional)
     * @param earTagIdLessThanOrEqual  (optional)
     * @param earTagIdNotEquals  (optional)
     * @param earTagIdNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param earTagIdSpecified  (optional)
     * @param idEquals  (optional)
     * @param idGreaterThan  (optional)
     * @param idGreaterThanOrEqual  (optional)
     * @param idIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idLessThan  (optional)
     * @param idLessThanOrEqual  (optional)
     * @param idNotEquals  (optional)
     * @param idNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idSpecified  (optional)
     * @param matrilinealityIdEquals  (optional)
     * @param matrilinealityIdGreaterThan  (optional)
     * @param matrilinealityIdGreaterThanOrEqual  (optional)
     * @param matrilinealityIdIn  (optional, default to new ArrayList&lt;&gt;())
     * @param matrilinealityIdLessThan  (optional)
     * @param matrilinealityIdLessThanOrEqual  (optional)
     * @param matrilinealityIdNotEquals  (optional)
     * @param matrilinealityIdNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param matrilinealityIdSpecified  (optional)
     * @param nameContains  (optional)
     * @param nameDoesNotContain  (optional)
     * @param nameEquals  (optional)
     * @param nameIn  (optional, default to new ArrayList&lt;&gt;())
     * @param nameNotEquals  (optional)
     * @param nameNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param nameSpecified  (optional)
     * @param noteIdEquals  (optional)
     * @param noteIdGreaterThan  (optional)
     * @param noteIdGreaterThanOrEqual  (optional)
     * @param noteIdIn  (optional, default to new ArrayList&lt;&gt;())
     * @param noteIdLessThan  (optional)
     * @param noteIdLessThanOrEqual  (optional)
     * @param noteIdNotEquals  (optional)
     * @param noteIdNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param noteIdSpecified  (optional)
     * @param page Page number of the requested page (optional)
     * @param photoIdEquals  (optional)
     * @param photoIdGreaterThan  (optional)
     * @param photoIdGreaterThanOrEqual  (optional)
     * @param photoIdIn  (optional, default to new ArrayList&lt;&gt;())
     * @param photoIdLessThan  (optional)
     * @param photoIdLessThanOrEqual  (optional)
     * @param photoIdNotEquals  (optional)
     * @param photoIdNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param photoIdSpecified  (optional)
     * @param showBlupEquals  (optional)
     * @param showBlupIn  (optional, default to new ArrayList&lt;&gt;())
     * @param showBlupNotEquals  (optional)
     * @param showBlupNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param showBlupSpecified  (optional)
     * @param size Size of a page (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional, default to new ArrayList&lt;&gt;())
     * @param storyHandleContains  (optional)
     * @param storyHandleDoesNotContain  (optional)
     * @param storyHandleEquals  (optional)
     * @param storyHandleIn  (optional, default to new ArrayList&lt;&gt;())
     * @param storyHandleNotEquals  (optional)
     * @param storyHandleNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param storyHandleSpecified  (optional)
     * @param upForSaleEquals  (optional)
     * @param upForSaleIn  (optional, default to new ArrayList&lt;&gt;())
     * @param upForSaleNotEquals  (optional)
     * @param upForSaleNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param upForSaleSpecified  (optional)
     * @param visibilityEquals  (optional)
     * @param visibilityIn  (optional, default to new ArrayList&lt;&gt;())
     * @param visibilityNotEquals  (optional)
     * @param visibilityNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param visibilitySpecified  (optional)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "getAllCattles", nickname = "getAllCattlesUsingGET", notes = "", response = CattleEntity.class, responseContainer = "List", tags={ "cattle-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CattleEntity.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/cattles",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<CattleEntity>> getAllCattlesUsingGET(@SpringQueryMap CattleCriteria criteria, @ApiParam(value = "Page number of the requested page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Size of a page") @Valid @RequestParam(value = "size", required = false) Integer size,@ApiParam(value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") @Valid @RequestParam(value = "sort", required = false) List<String> sort);   


    /**
     * GET /api/cattles/{id} : getCattle
     *
     * @param id id (required)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "getCattle", nickname = "getCattleUsingGET", notes = "", response = CattleEntity.class, tags={ "cattle-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CattleEntity.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/cattles/{id}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<CattleEntity> getCattleUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    /**
     * PUT /api/cattles : updateCattle
     *
     * @param cattleEntity cattleEntity (required)
     * @return OK (status code 200)
     *         or Created (status code 201)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "updateCattle", nickname = "updateCattleUsingPUT", notes = "", response = CattleEntity.class, tags={ "cattle-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CattleEntity.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/cattles",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<CattleEntity> updateCattleUsingPUT(@ApiParam(value = "cattleEntity" ,required=true )  @Valid @RequestBody CattleEntity cattleEntity);

}
