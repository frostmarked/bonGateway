/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bonlimousin.gateway.client.bonreplicaservice.apidocs.api;

import java.time.OffsetDateTime;

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import com.bonlimousin.gateway.client.bonreplicaservice.apidocs.model.SourceFileEntity;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-07-04T00:07:53.375872+02:00[Europe/Stockholm]")

@Validated
@Api(value = "SourceFileResource", description = "the SourceFileResource API")
public interface SourceFileResourceApi {

    /**
     * GET /api/source-files/count : countSourceFiles
     *
     * @param idEquals  (optional)
     * @param idGreaterThan  (optional)
     * @param idGreaterThanOrEqual  (optional)
     * @param idIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idLessThan  (optional)
     * @param idLessThanOrEqual  (optional)
     * @param idNotEquals  (optional)
     * @param idNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idSpecified  (optional)
     * @param nameContains  (optional)
     * @param nameDoesNotContain  (optional)
     * @param nameEquals  (optional)
     * @param nameIn  (optional, default to new ArrayList&lt;&gt;())
     * @param nameNotEquals  (optional)
     * @param nameNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param nameSpecified  (optional)
     * @param outcomeContains  (optional)
     * @param outcomeDoesNotContain  (optional)
     * @param outcomeEquals  (optional)
     * @param outcomeIn  (optional, default to new ArrayList&lt;&gt;())
     * @param outcomeNotEquals  (optional)
     * @param outcomeNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param outcomeSpecified  (optional)
     * @param processedEquals  (optional)
     * @param processedGreaterThan  (optional)
     * @param processedGreaterThanOrEqual  (optional)
     * @param processedIn0EpochSecond  (optional)
     * @param processedIn0Nano  (optional)
     * @param processedLessThan  (optional)
     * @param processedLessThanOrEqual  (optional)
     * @param processedNotEquals  (optional)
     * @param processedNotIn0EpochSecond  (optional)
     * @param processedNotIn0Nano  (optional)
     * @param processedSpecified  (optional)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "countSourceFiles", nickname = "countSourceFilesUsingGET", notes = "", response = Long.class, tags={ "source-file-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Long.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/source-files/count",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Long> countSourceFilesUsingGET(@ApiParam(value = "") @Valid @RequestParam(value = "id.equals", required = false) Long idEquals,@ApiParam(value = "") @Valid @RequestParam(value = "id.greaterThan", required = false) Long idGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "id.greaterThanOrEqual", required = false) Long idGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "id.in", required = false) List<Long> idIn,@ApiParam(value = "") @Valid @RequestParam(value = "id.lessThan", required = false) Long idLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "id.lessThanOrEqual", required = false) Long idLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "id.notEquals", required = false) Long idNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "id.notIn", required = false) List<Long> idNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "id.specified", required = false) Boolean idSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "name.contains", required = false) String nameContains,@ApiParam(value = "") @Valid @RequestParam(value = "name.doesNotContain", required = false) String nameDoesNotContain,@ApiParam(value = "") @Valid @RequestParam(value = "name.equals", required = false) String nameEquals,@ApiParam(value = "") @Valid @RequestParam(value = "name.in", required = false) List<String> nameIn,@ApiParam(value = "") @Valid @RequestParam(value = "name.notEquals", required = false) String nameNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "name.notIn", required = false) List<String> nameNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "name.specified", required = false) Boolean nameSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "outcome.contains", required = false) String outcomeContains,@ApiParam(value = "") @Valid @RequestParam(value = "outcome.doesNotContain", required = false) String outcomeDoesNotContain,@ApiParam(value = "") @Valid @RequestParam(value = "outcome.equals", required = false) String outcomeEquals,@ApiParam(value = "") @Valid @RequestParam(value = "outcome.in", required = false) List<String> outcomeIn,@ApiParam(value = "") @Valid @RequestParam(value = "outcome.notEquals", required = false) String outcomeNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "outcome.notIn", required = false) List<String> outcomeNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "outcome.specified", required = false) Boolean outcomeSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "processed.equals", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime processedEquals,@ApiParam(value = "") @Valid @RequestParam(value = "processed.greaterThan", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime processedGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "processed.greaterThanOrEqual", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime processedGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "processed.in[0].epochSecond", required = false) Long processedIn0EpochSecond,@ApiParam(value = "") @Valid @RequestParam(value = "processed.in[0].nano", required = false) Integer processedIn0Nano,@ApiParam(value = "") @Valid @RequestParam(value = "processed.lessThan", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime processedLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "processed.lessThanOrEqual", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime processedLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "processed.notEquals", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime processedNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "processed.notIn[0].epochSecond", required = false) Long processedNotIn0EpochSecond,@ApiParam(value = "") @Valid @RequestParam(value = "processed.notIn[0].nano", required = false) Integer processedNotIn0Nano,@ApiParam(value = "") @Valid @RequestParam(value = "processed.specified", required = false) Boolean processedSpecified);


    /**
     * POST /api/source-files : createSourceFile
     *
     * @param sourceFileEntity sourceFileEntity (required)
     * @return OK (status code 200)
     *         or Created (status code 201)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "createSourceFile", nickname = "createSourceFileUsingPOST", notes = "", response = SourceFileEntity.class, tags={ "source-file-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SourceFileEntity.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/source-files",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<SourceFileEntity> createSourceFileUsingPOST(@ApiParam(value = "sourceFileEntity" ,required=true )  @Valid @RequestBody SourceFileEntity sourceFileEntity);


    /**
     * DELETE /api/source-files/{id} : deleteSourceFile
     *
     * @param id id (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @ApiOperation(value = "deleteSourceFile", nickname = "deleteSourceFileUsingDELETE", notes = "", tags={ "source-file-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/api/source-files/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteSourceFileUsingDELETE(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    /**
     * GET /api/source-files : getAllSourceFiles
     *
     * @param idEquals  (optional)
     * @param idGreaterThan  (optional)
     * @param idGreaterThanOrEqual  (optional)
     * @param idIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idLessThan  (optional)
     * @param idLessThanOrEqual  (optional)
     * @param idNotEquals  (optional)
     * @param idNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idSpecified  (optional)
     * @param nameContains  (optional)
     * @param nameDoesNotContain  (optional)
     * @param nameEquals  (optional)
     * @param nameIn  (optional, default to new ArrayList&lt;&gt;())
     * @param nameNotEquals  (optional)
     * @param nameNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param nameSpecified  (optional)
     * @param outcomeContains  (optional)
     * @param outcomeDoesNotContain  (optional)
     * @param outcomeEquals  (optional)
     * @param outcomeIn  (optional, default to new ArrayList&lt;&gt;())
     * @param outcomeNotEquals  (optional)
     * @param outcomeNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param outcomeSpecified  (optional)
     * @param page Page number of the requested page (optional)
     * @param processedEquals  (optional)
     * @param processedGreaterThan  (optional)
     * @param processedGreaterThanOrEqual  (optional)
     * @param processedIn0EpochSecond  (optional)
     * @param processedIn0Nano  (optional)
     * @param processedLessThan  (optional)
     * @param processedLessThanOrEqual  (optional)
     * @param processedNotEquals  (optional)
     * @param processedNotIn0EpochSecond  (optional)
     * @param processedNotIn0Nano  (optional)
     * @param processedSpecified  (optional)
     * @param size Size of a page (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional, default to new ArrayList&lt;&gt;())
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "getAllSourceFiles", nickname = "getAllSourceFilesUsingGET", notes = "", response = SourceFileEntity.class, responseContainer = "List", tags={ "source-file-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SourceFileEntity.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/source-files",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<SourceFileEntity>> getAllSourceFilesUsingGET(@ApiParam(value = "") @Valid @RequestParam(value = "id.equals", required = false) Long idEquals,@ApiParam(value = "") @Valid @RequestParam(value = "id.greaterThan", required = false) Long idGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "id.greaterThanOrEqual", required = false) Long idGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "id.in", required = false) List<Long> idIn,@ApiParam(value = "") @Valid @RequestParam(value = "id.lessThan", required = false) Long idLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "id.lessThanOrEqual", required = false) Long idLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "id.notEquals", required = false) Long idNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "id.notIn", required = false) List<Long> idNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "id.specified", required = false) Boolean idSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "name.contains", required = false) String nameContains,@ApiParam(value = "") @Valid @RequestParam(value = "name.doesNotContain", required = false) String nameDoesNotContain,@ApiParam(value = "") @Valid @RequestParam(value = "name.equals", required = false) String nameEquals,@ApiParam(value = "") @Valid @RequestParam(value = "name.in", required = false) List<String> nameIn,@ApiParam(value = "") @Valid @RequestParam(value = "name.notEquals", required = false) String nameNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "name.notIn", required = false) List<String> nameNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "name.specified", required = false) Boolean nameSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "outcome.contains", required = false) String outcomeContains,@ApiParam(value = "") @Valid @RequestParam(value = "outcome.doesNotContain", required = false) String outcomeDoesNotContain,@ApiParam(value = "") @Valid @RequestParam(value = "outcome.equals", required = false) String outcomeEquals,@ApiParam(value = "") @Valid @RequestParam(value = "outcome.in", required = false) List<String> outcomeIn,@ApiParam(value = "") @Valid @RequestParam(value = "outcome.notEquals", required = false) String outcomeNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "outcome.notIn", required = false) List<String> outcomeNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "outcome.specified", required = false) Boolean outcomeSpecified,@ApiParam(value = "Page number of the requested page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "") @Valid @RequestParam(value = "processed.equals", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime processedEquals,@ApiParam(value = "") @Valid @RequestParam(value = "processed.greaterThan", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime processedGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "processed.greaterThanOrEqual", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime processedGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "processed.in[0].epochSecond", required = false) Long processedIn0EpochSecond,@ApiParam(value = "") @Valid @RequestParam(value = "processed.in[0].nano", required = false) Integer processedIn0Nano,@ApiParam(value = "") @Valid @RequestParam(value = "processed.lessThan", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime processedLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "processed.lessThanOrEqual", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime processedLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "processed.notEquals", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime processedNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "processed.notIn[0].epochSecond", required = false) Long processedNotIn0EpochSecond,@ApiParam(value = "") @Valid @RequestParam(value = "processed.notIn[0].nano", required = false) Integer processedNotIn0Nano,@ApiParam(value = "") @Valid @RequestParam(value = "processed.specified", required = false) Boolean processedSpecified,@ApiParam(value = "Size of a page") @Valid @RequestParam(value = "size", required = false) Integer size,@ApiParam(value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") @Valid @RequestParam(value = "sort", required = false) List<String> sort);


    /**
     * GET /api/source-files/{id} : getSourceFile
     *
     * @param id id (required)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "getSourceFile", nickname = "getSourceFileUsingGET", notes = "", response = SourceFileEntity.class, tags={ "source-file-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SourceFileEntity.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/source-files/{id}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<SourceFileEntity> getSourceFileUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    /**
     * PUT /api/source-files : updateSourceFile
     *
     * @param sourceFileEntity sourceFileEntity (required)
     * @return OK (status code 200)
     *         or Created (status code 201)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "updateSourceFile", nickname = "updateSourceFileUsingPUT", notes = "", response = SourceFileEntity.class, tags={ "source-file-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SourceFileEntity.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/source-files",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<SourceFileEntity> updateSourceFileUsingPUT(@ApiParam(value = "sourceFileEntity" ,required=true )  @Valid @RequestBody SourceFileEntity sourceFileEntity);

}
