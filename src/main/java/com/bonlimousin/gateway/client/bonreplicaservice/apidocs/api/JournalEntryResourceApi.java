/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bonlimousin.gateway.client.bonreplicaservice.apidocs.api;

import java.time.OffsetDateTime;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import com.bonlimousin.gateway.client.bonreplicaservice.apidocs.model.JournalEntryEntity;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-07-04T00:07:53.375872+02:00[Europe/Stockholm]")

@Validated
@Api(value = "JournalEntryResource", description = "the JournalEntryResource API")
public interface JournalEntryResourceApi {

    /**
     * GET /api/journal-entries/count : countJournalEntries
     *
     * @param bovineIdEquals  (optional)
     * @param bovineIdGreaterThan  (optional)
     * @param bovineIdGreaterThanOrEqual  (optional)
     * @param bovineIdIn  (optional, default to new ArrayList&lt;&gt;())
     * @param bovineIdLessThan  (optional)
     * @param bovineIdLessThanOrEqual  (optional)
     * @param bovineIdNotEquals  (optional)
     * @param bovineIdNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param bovineIdSpecified  (optional)
     * @param dateEquals  (optional)
     * @param dateGreaterThan  (optional)
     * @param dateGreaterThanOrEqual  (optional)
     * @param dateIn0EpochSecond  (optional)
     * @param dateIn0Nano  (optional)
     * @param dateLessThan  (optional)
     * @param dateLessThanOrEqual  (optional)
     * @param dateNotEquals  (optional)
     * @param dateNotIn0EpochSecond  (optional)
     * @param dateNotIn0Nano  (optional)
     * @param dateSpecified  (optional)
     * @param editedEquals  (optional)
     * @param editedGreaterThan  (optional)
     * @param editedGreaterThanOrEqual  (optional)
     * @param editedIn0EpochSecond  (optional)
     * @param editedIn0Nano  (optional)
     * @param editedLessThan  (optional)
     * @param editedLessThanOrEqual  (optional)
     * @param editedNotEquals  (optional)
     * @param editedNotIn0EpochSecond  (optional)
     * @param editedNotIn0Nano  (optional)
     * @param editedSpecified  (optional)
     * @param herdIdEquals  (optional)
     * @param herdIdGreaterThan  (optional)
     * @param herdIdGreaterThanOrEqual  (optional)
     * @param herdIdIn  (optional, default to new ArrayList&lt;&gt;())
     * @param herdIdLessThan  (optional)
     * @param herdIdLessThanOrEqual  (optional)
     * @param herdIdNotEquals  (optional)
     * @param herdIdNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param herdIdSpecified  (optional)
     * @param idEquals  (optional)
     * @param idGreaterThan  (optional)
     * @param idGreaterThanOrEqual  (optional)
     * @param idIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idLessThan  (optional)
     * @param idLessThanOrEqual  (optional)
     * @param idNotEquals  (optional)
     * @param idNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idSpecified  (optional)
     * @param newHerdIdEquals  (optional)
     * @param newHerdIdGreaterThan  (optional)
     * @param newHerdIdGreaterThanOrEqual  (optional)
     * @param newHerdIdIn  (optional, default to new ArrayList&lt;&gt;())
     * @param newHerdIdLessThan  (optional)
     * @param newHerdIdLessThanOrEqual  (optional)
     * @param newHerdIdNotEquals  (optional)
     * @param newHerdIdNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param newHerdIdSpecified  (optional)
     * @param statusEquals  (optional)
     * @param statusIn  (optional, default to new ArrayList&lt;&gt;())
     * @param statusNotEquals  (optional)
     * @param statusNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param statusSpecified  (optional)
     * @param subState1Equals  (optional)
     * @param subState1GreaterThan  (optional)
     * @param subState1GreaterThanOrEqual  (optional)
     * @param subState1In  (optional, default to new ArrayList&lt;&gt;())
     * @param subState1LessThan  (optional)
     * @param subState1LessThanOrEqual  (optional)
     * @param subState1NotEquals  (optional)
     * @param subState1NotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param subState1Specified  (optional)
     * @param subState2Equals  (optional)
     * @param subState2GreaterThan  (optional)
     * @param subState2GreaterThanOrEqual  (optional)
     * @param subState2In  (optional, default to new ArrayList&lt;&gt;())
     * @param subState2LessThan  (optional)
     * @param subState2LessThanOrEqual  (optional)
     * @param subState2NotEquals  (optional)
     * @param subState2NotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param subState2Specified  (optional)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "countJournalEntries", nickname = "countJournalEntriesUsingGET", notes = "", response = Long.class, tags={ "journal-entry-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Long.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/journal-entries/count",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<Long> countJournalEntriesUsingGET(@ApiParam(value = "") @Valid @RequestParam(value = "bovineId.equals", required = false) Long bovineIdEquals,@ApiParam(value = "") @Valid @RequestParam(value = "bovineId.greaterThan", required = false) Long bovineIdGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "bovineId.greaterThanOrEqual", required = false) Long bovineIdGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "bovineId.in", required = false) List<Long> bovineIdIn,@ApiParam(value = "") @Valid @RequestParam(value = "bovineId.lessThan", required = false) Long bovineIdLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "bovineId.lessThanOrEqual", required = false) Long bovineIdLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "bovineId.notEquals", required = false) Long bovineIdNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "bovineId.notIn", required = false) List<Long> bovineIdNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "bovineId.specified", required = false) Boolean bovineIdSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "date.equals", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime dateEquals,@ApiParam(value = "") @Valid @RequestParam(value = "date.greaterThan", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime dateGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "date.greaterThanOrEqual", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime dateGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "date.in[0].epochSecond", required = false) Long dateIn0EpochSecond,@ApiParam(value = "") @Valid @RequestParam(value = "date.in[0].nano", required = false) Integer dateIn0Nano,@ApiParam(value = "") @Valid @RequestParam(value = "date.lessThan", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime dateLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "date.lessThanOrEqual", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime dateLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "date.notEquals", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime dateNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "date.notIn[0].epochSecond", required = false) Long dateNotIn0EpochSecond,@ApiParam(value = "") @Valid @RequestParam(value = "date.notIn[0].nano", required = false) Integer dateNotIn0Nano,@ApiParam(value = "") @Valid @RequestParam(value = "date.specified", required = false) Boolean dateSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "edited.equals", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime editedEquals,@ApiParam(value = "") @Valid @RequestParam(value = "edited.greaterThan", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime editedGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "edited.greaterThanOrEqual", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime editedGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "edited.in[0].epochSecond", required = false) Long editedIn0EpochSecond,@ApiParam(value = "") @Valid @RequestParam(value = "edited.in[0].nano", required = false) Integer editedIn0Nano,@ApiParam(value = "") @Valid @RequestParam(value = "edited.lessThan", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime editedLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "edited.lessThanOrEqual", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime editedLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "edited.notEquals", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime editedNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "edited.notIn[0].epochSecond", required = false) Long editedNotIn0EpochSecond,@ApiParam(value = "") @Valid @RequestParam(value = "edited.notIn[0].nano", required = false) Integer editedNotIn0Nano,@ApiParam(value = "") @Valid @RequestParam(value = "edited.specified", required = false) Boolean editedSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "herdId.equals", required = false) Integer herdIdEquals,@ApiParam(value = "") @Valid @RequestParam(value = "herdId.greaterThan", required = false) Integer herdIdGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "herdId.greaterThanOrEqual", required = false) Integer herdIdGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "herdId.in", required = false) List<Integer> herdIdIn,@ApiParam(value = "") @Valid @RequestParam(value = "herdId.lessThan", required = false) Integer herdIdLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "herdId.lessThanOrEqual", required = false) Integer herdIdLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "herdId.notEquals", required = false) Integer herdIdNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "herdId.notIn", required = false) List<Integer> herdIdNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "herdId.specified", required = false) Boolean herdIdSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "id.equals", required = false) Long idEquals,@ApiParam(value = "") @Valid @RequestParam(value = "id.greaterThan", required = false) Long idGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "id.greaterThanOrEqual", required = false) Long idGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "id.in", required = false) List<Long> idIn,@ApiParam(value = "") @Valid @RequestParam(value = "id.lessThan", required = false) Long idLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "id.lessThanOrEqual", required = false) Long idLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "id.notEquals", required = false) Long idNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "id.notIn", required = false) List<Long> idNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "id.specified", required = false) Boolean idSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "newHerdId.equals", required = false) Integer newHerdIdEquals,@ApiParam(value = "") @Valid @RequestParam(value = "newHerdId.greaterThan", required = false) Integer newHerdIdGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "newHerdId.greaterThanOrEqual", required = false) Integer newHerdIdGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "newHerdId.in", required = false) List<Integer> newHerdIdIn,@ApiParam(value = "") @Valid @RequestParam(value = "newHerdId.lessThan", required = false) Integer newHerdIdLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "newHerdId.lessThanOrEqual", required = false) Integer newHerdIdLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "newHerdId.notEquals", required = false) Integer newHerdIdNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "newHerdId.notIn", required = false) List<Integer> newHerdIdNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "newHerdId.specified", required = false) Boolean newHerdIdSpecified,@ApiParam(value = "", allowableValues = "FOD, IB, TU, RET, UTG") @Valid @RequestParam(value = "status.equals", required = false) String statusEquals,@ApiParam(value = "", allowableValues = "FOD, IB, TU, RET, UTG") @Valid @RequestParam(value = "status.in", required = false) List<String> statusIn,@ApiParam(value = "", allowableValues = "FOD, IB, TU, RET, UTG") @Valid @RequestParam(value = "status.notEquals", required = false) String statusNotEquals,@ApiParam(value = "", allowableValues = "FOD, IB, TU, RET, UTG") @Valid @RequestParam(value = "status.notIn", required = false) List<String> statusNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "status.specified", required = false) Boolean statusSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "subState1.equals", required = false) Integer subState1Equals,@ApiParam(value = "") @Valid @RequestParam(value = "subState1.greaterThan", required = false) Integer subState1GreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "subState1.greaterThanOrEqual", required = false) Integer subState1GreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "subState1.in", required = false) List<Integer> subState1In,@ApiParam(value = "") @Valid @RequestParam(value = "subState1.lessThan", required = false) Integer subState1LessThan,@ApiParam(value = "") @Valid @RequestParam(value = "subState1.lessThanOrEqual", required = false) Integer subState1LessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "subState1.notEquals", required = false) Integer subState1NotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "subState1.notIn", required = false) List<Integer> subState1NotIn,@ApiParam(value = "") @Valid @RequestParam(value = "subState1.specified", required = false) Boolean subState1Specified,@ApiParam(value = "") @Valid @RequestParam(value = "subState2.equals", required = false) Integer subState2Equals,@ApiParam(value = "") @Valid @RequestParam(value = "subState2.greaterThan", required = false) Integer subState2GreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "subState2.greaterThanOrEqual", required = false) Integer subState2GreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "subState2.in", required = false) List<Integer> subState2In,@ApiParam(value = "") @Valid @RequestParam(value = "subState2.lessThan", required = false) Integer subState2LessThan,@ApiParam(value = "") @Valid @RequestParam(value = "subState2.lessThanOrEqual", required = false) Integer subState2LessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "subState2.notEquals", required = false) Integer subState2NotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "subState2.notIn", required = false) List<Integer> subState2NotIn,@ApiParam(value = "") @Valid @RequestParam(value = "subState2.specified", required = false) Boolean subState2Specified);


    /**
     * GET /api/journal-entries : getAllJournalEntries
     *
     * @param bovineIdEquals  (optional)
     * @param bovineIdGreaterThan  (optional)
     * @param bovineIdGreaterThanOrEqual  (optional)
     * @param bovineIdIn  (optional, default to new ArrayList&lt;&gt;())
     * @param bovineIdLessThan  (optional)
     * @param bovineIdLessThanOrEqual  (optional)
     * @param bovineIdNotEquals  (optional)
     * @param bovineIdNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param bovineIdSpecified  (optional)
     * @param dateEquals  (optional)
     * @param dateGreaterThan  (optional)
     * @param dateGreaterThanOrEqual  (optional)
     * @param dateIn0EpochSecond  (optional)
     * @param dateIn0Nano  (optional)
     * @param dateLessThan  (optional)
     * @param dateLessThanOrEqual  (optional)
     * @param dateNotEquals  (optional)
     * @param dateNotIn0EpochSecond  (optional)
     * @param dateNotIn0Nano  (optional)
     * @param dateSpecified  (optional)
     * @param editedEquals  (optional)
     * @param editedGreaterThan  (optional)
     * @param editedGreaterThanOrEqual  (optional)
     * @param editedIn0EpochSecond  (optional)
     * @param editedIn0Nano  (optional)
     * @param editedLessThan  (optional)
     * @param editedLessThanOrEqual  (optional)
     * @param editedNotEquals  (optional)
     * @param editedNotIn0EpochSecond  (optional)
     * @param editedNotIn0Nano  (optional)
     * @param editedSpecified  (optional)
     * @param herdIdEquals  (optional)
     * @param herdIdGreaterThan  (optional)
     * @param herdIdGreaterThanOrEqual  (optional)
     * @param herdIdIn  (optional, default to new ArrayList&lt;&gt;())
     * @param herdIdLessThan  (optional)
     * @param herdIdLessThanOrEqual  (optional)
     * @param herdIdNotEquals  (optional)
     * @param herdIdNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param herdIdSpecified  (optional)
     * @param idEquals  (optional)
     * @param idGreaterThan  (optional)
     * @param idGreaterThanOrEqual  (optional)
     * @param idIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idLessThan  (optional)
     * @param idLessThanOrEqual  (optional)
     * @param idNotEquals  (optional)
     * @param idNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param idSpecified  (optional)
     * @param newHerdIdEquals  (optional)
     * @param newHerdIdGreaterThan  (optional)
     * @param newHerdIdGreaterThanOrEqual  (optional)
     * @param newHerdIdIn  (optional, default to new ArrayList&lt;&gt;())
     * @param newHerdIdLessThan  (optional)
     * @param newHerdIdLessThanOrEqual  (optional)
     * @param newHerdIdNotEquals  (optional)
     * @param newHerdIdNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param newHerdIdSpecified  (optional)
     * @param page Page number of the requested page (optional)
     * @param size Size of a page (optional)
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional, default to new ArrayList&lt;&gt;())
     * @param statusEquals  (optional)
     * @param statusIn  (optional, default to new ArrayList&lt;&gt;())
     * @param statusNotEquals  (optional)
     * @param statusNotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param statusSpecified  (optional)
     * @param subState1Equals  (optional)
     * @param subState1GreaterThan  (optional)
     * @param subState1GreaterThanOrEqual  (optional)
     * @param subState1In  (optional, default to new ArrayList&lt;&gt;())
     * @param subState1LessThan  (optional)
     * @param subState1LessThanOrEqual  (optional)
     * @param subState1NotEquals  (optional)
     * @param subState1NotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param subState1Specified  (optional)
     * @param subState2Equals  (optional)
     * @param subState2GreaterThan  (optional)
     * @param subState2GreaterThanOrEqual  (optional)
     * @param subState2In  (optional, default to new ArrayList&lt;&gt;())
     * @param subState2LessThan  (optional)
     * @param subState2LessThanOrEqual  (optional)
     * @param subState2NotEquals  (optional)
     * @param subState2NotIn  (optional, default to new ArrayList&lt;&gt;())
     * @param subState2Specified  (optional)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "getAllJournalEntries", nickname = "getAllJournalEntriesUsingGET", notes = "", response = JournalEntryEntity.class, responseContainer = "List", tags={ "journal-entry-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = JournalEntryEntity.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/journal-entries",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<JournalEntryEntity>> getAllJournalEntriesUsingGET(@ApiParam(value = "") @Valid @RequestParam(value = "bovineId.equals", required = false) Long bovineIdEquals,@ApiParam(value = "") @Valid @RequestParam(value = "bovineId.greaterThan", required = false) Long bovineIdGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "bovineId.greaterThanOrEqual", required = false) Long bovineIdGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "bovineId.in", required = false) List<Long> bovineIdIn,@ApiParam(value = "") @Valid @RequestParam(value = "bovineId.lessThan", required = false) Long bovineIdLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "bovineId.lessThanOrEqual", required = false) Long bovineIdLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "bovineId.notEquals", required = false) Long bovineIdNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "bovineId.notIn", required = false) List<Long> bovineIdNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "bovineId.specified", required = false) Boolean bovineIdSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "date.equals", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime dateEquals,@ApiParam(value = "") @Valid @RequestParam(value = "date.greaterThan", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime dateGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "date.greaterThanOrEqual", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime dateGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "date.in[0].epochSecond", required = false) Long dateIn0EpochSecond,@ApiParam(value = "") @Valid @RequestParam(value = "date.in[0].nano", required = false) Integer dateIn0Nano,@ApiParam(value = "") @Valid @RequestParam(value = "date.lessThan", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime dateLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "date.lessThanOrEqual", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime dateLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "date.notEquals", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime dateNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "date.notIn[0].epochSecond", required = false) Long dateNotIn0EpochSecond,@ApiParam(value = "") @Valid @RequestParam(value = "date.notIn[0].nano", required = false) Integer dateNotIn0Nano,@ApiParam(value = "") @Valid @RequestParam(value = "date.specified", required = false) Boolean dateSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "edited.equals", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime editedEquals,@ApiParam(value = "") @Valid @RequestParam(value = "edited.greaterThan", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime editedGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "edited.greaterThanOrEqual", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime editedGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "edited.in[0].epochSecond", required = false) Long editedIn0EpochSecond,@ApiParam(value = "") @Valid @RequestParam(value = "edited.in[0].nano", required = false) Integer editedIn0Nano,@ApiParam(value = "") @Valid @RequestParam(value = "edited.lessThan", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime editedLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "edited.lessThanOrEqual", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime editedLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "edited.notEquals", required = false) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE_TIME) OffsetDateTime editedNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "edited.notIn[0].epochSecond", required = false) Long editedNotIn0EpochSecond,@ApiParam(value = "") @Valid @RequestParam(value = "edited.notIn[0].nano", required = false) Integer editedNotIn0Nano,@ApiParam(value = "") @Valid @RequestParam(value = "edited.specified", required = false) Boolean editedSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "herdId.equals", required = false) Integer herdIdEquals,@ApiParam(value = "") @Valid @RequestParam(value = "herdId.greaterThan", required = false) Integer herdIdGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "herdId.greaterThanOrEqual", required = false) Integer herdIdGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "herdId.in", required = false) List<Integer> herdIdIn,@ApiParam(value = "") @Valid @RequestParam(value = "herdId.lessThan", required = false) Integer herdIdLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "herdId.lessThanOrEqual", required = false) Integer herdIdLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "herdId.notEquals", required = false) Integer herdIdNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "herdId.notIn", required = false) List<Integer> herdIdNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "herdId.specified", required = false) Boolean herdIdSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "id.equals", required = false) Long idEquals,@ApiParam(value = "") @Valid @RequestParam(value = "id.greaterThan", required = false) Long idGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "id.greaterThanOrEqual", required = false) Long idGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "id.in", required = false) List<Long> idIn,@ApiParam(value = "") @Valid @RequestParam(value = "id.lessThan", required = false) Long idLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "id.lessThanOrEqual", required = false) Long idLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "id.notEquals", required = false) Long idNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "id.notIn", required = false) List<Long> idNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "id.specified", required = false) Boolean idSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "newHerdId.equals", required = false) Integer newHerdIdEquals,@ApiParam(value = "") @Valid @RequestParam(value = "newHerdId.greaterThan", required = false) Integer newHerdIdGreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "newHerdId.greaterThanOrEqual", required = false) Integer newHerdIdGreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "newHerdId.in", required = false) List<Integer> newHerdIdIn,@ApiParam(value = "") @Valid @RequestParam(value = "newHerdId.lessThan", required = false) Integer newHerdIdLessThan,@ApiParam(value = "") @Valid @RequestParam(value = "newHerdId.lessThanOrEqual", required = false) Integer newHerdIdLessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "newHerdId.notEquals", required = false) Integer newHerdIdNotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "newHerdId.notIn", required = false) List<Integer> newHerdIdNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "newHerdId.specified", required = false) Boolean newHerdIdSpecified,@ApiParam(value = "Page number of the requested page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Size of a page") @Valid @RequestParam(value = "size", required = false) Integer size,@ApiParam(value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") @Valid @RequestParam(value = "sort", required = false) List<String> sort,@ApiParam(value = "", allowableValues = "FOD, IB, TU, RET, UTG") @Valid @RequestParam(value = "status.equals", required = false) String statusEquals,@ApiParam(value = "", allowableValues = "FOD, IB, TU, RET, UTG") @Valid @RequestParam(value = "status.in", required = false) List<String> statusIn,@ApiParam(value = "", allowableValues = "FOD, IB, TU, RET, UTG") @Valid @RequestParam(value = "status.notEquals", required = false) String statusNotEquals,@ApiParam(value = "", allowableValues = "FOD, IB, TU, RET, UTG") @Valid @RequestParam(value = "status.notIn", required = false) List<String> statusNotIn,@ApiParam(value = "") @Valid @RequestParam(value = "status.specified", required = false) Boolean statusSpecified,@ApiParam(value = "") @Valid @RequestParam(value = "subState1.equals", required = false) Integer subState1Equals,@ApiParam(value = "") @Valid @RequestParam(value = "subState1.greaterThan", required = false) Integer subState1GreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "subState1.greaterThanOrEqual", required = false) Integer subState1GreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "subState1.in", required = false) List<Integer> subState1In,@ApiParam(value = "") @Valid @RequestParam(value = "subState1.lessThan", required = false) Integer subState1LessThan,@ApiParam(value = "") @Valid @RequestParam(value = "subState1.lessThanOrEqual", required = false) Integer subState1LessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "subState1.notEquals", required = false) Integer subState1NotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "subState1.notIn", required = false) List<Integer> subState1NotIn,@ApiParam(value = "") @Valid @RequestParam(value = "subState1.specified", required = false) Boolean subState1Specified,@ApiParam(value = "") @Valid @RequestParam(value = "subState2.equals", required = false) Integer subState2Equals,@ApiParam(value = "") @Valid @RequestParam(value = "subState2.greaterThan", required = false) Integer subState2GreaterThan,@ApiParam(value = "") @Valid @RequestParam(value = "subState2.greaterThanOrEqual", required = false) Integer subState2GreaterThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "subState2.in", required = false) List<Integer> subState2In,@ApiParam(value = "") @Valid @RequestParam(value = "subState2.lessThan", required = false) Integer subState2LessThan,@ApiParam(value = "") @Valid @RequestParam(value = "subState2.lessThanOrEqual", required = false) Integer subState2LessThanOrEqual,@ApiParam(value = "") @Valid @RequestParam(value = "subState2.notEquals", required = false) Integer subState2NotEquals,@ApiParam(value = "") @Valid @RequestParam(value = "subState2.notIn", required = false) List<Integer> subState2NotIn,@ApiParam(value = "") @Valid @RequestParam(value = "subState2.specified", required = false) Boolean subState2Specified);


    /**
     * GET /api/journal-entries/{id} : getJournalEntry
     *
     * @param id id (required)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "getJournalEntry", nickname = "getJournalEntryUsingGET", notes = "", response = JournalEntryEntity.class, tags={ "journal-entry-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = JournalEntryEntity.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/journal-entries/{id}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<JournalEntryEntity> getJournalEntryUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);

}
