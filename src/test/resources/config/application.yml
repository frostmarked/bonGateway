# ===================================================================
# Spring Boot configuration.
#
# This configuration is used for unit/integration tests.
#
# More information on profiles: https://www.jhipster.tech/profiles/
# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

eureka:
  client:
    enabled: false
  instance:
    appname: bonGateway
    instanceId: bonGateway:${spring.application.instance-id:${random.value}}

spring:
  profiles:
    # Uncomment the following line to enable tests against production database type rather than H2, using Testcontainers
    #active: testcontainers
  application:
    name: bonGateway
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:h2:mem:bonGateway;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    name:
    username:
    password:
    hikari:
      auto-commit: false
  jackson:
    serialization:
      write-durations-as-timestamps: false
  jpa:
    database-platform: io.github.jhipster.domain.util.FixedH2Dialect
    open-in-view: false
    show-sql: false
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
    properties:
      hibernate.id.new_generator_mappings: true
      hibernate.connection.provider_disables_autocommit: true
      hibernate.cache.use_second_level_cache: false
      hibernate.cache.use_query_cache: false
      hibernate.generate_statistics: false
      hibernate.hbm2ddl.auto: validate
      hibernate.jdbc.time_zone: UTC
  liquibase:
    contexts: test
  mail:
    host: localhost
  main:
    allow-bean-definition-overriding: true
  messages:
    basename: i18n/messages
  task:
    execution:
      thread-name-prefix: bon-gateway-task-
      pool:
        core-size: 1
        max-size: 50
        queue-capacity: 10000
    scheduling:
      thread-name-prefix: bon-gateway-scheduling-
      pool:
        size: 1
  thymeleaf:
    mode: HTML
  # TODO graphql with kickstart breaks the test.
  # https://github.com/graphql-java-kickstart/graphql-spring-boot/issues/230
  # handle for now according to issue on github
  autoconfigure:
    exclude:
      - graphql.kickstart.spring.web.boot.GraphQLWebAutoConfiguration
      - graphql.kickstart.spring.web.boot.GraphQLWebsocketAutoConfiguration

server:
  port: 10344
  address: localhost

# ===================================================================
# JHipster specific properties
#
# Full reference is available at: https://www.jhipster.tech/common-application-properties/
# ===================================================================

jhipster:
  clientApp:
    name: 'bonGatewayApp'
  logging:
    # To test json console appender
    use-json-format: false
    logstash:
      enabled: false
      host: localhost
      port: 5000
      queue-size: 512
  mail:
    from: test@localhost
    base-url: http://127.0.0.1:8080
  security:
    authentication:
      jwt:
        # This token must be encoded using Base64 (you can type `echo 'secret-key'|base64` on your command line)
        base64-secret: MjU0MjE1NGQ1Y2MzNjBmZTQ1MjI5OWZhMmM1MWU5NjM4YmVjMGE3ZDJkYzllNDE4N2U0NjExYmRlMWFmNWU2OWE0ZTk0ZjhjZTdkZDcyYmUxOGM5NjgxZDZjYmM3YzJkMzYwZGRiZjA0ZjQ1OTcwMWU4MTEwYmI4YTAwNzRiYWY=
        # Token is valid 24 hours
        token-validity-in-seconds: 86400
  metrics:
    logs: # Reports metrics in the logs
      enabled: true
      report-frequency: 60 # in seconds
kafka:
  bootstrap-servers: localhost:9092
  consumer:
    key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
    value.deserializer: org.apache.kafka.common.serialization.StringDeserializer
    group.id: bon-gateway
    auto.offset.reset: earliest
  producer:
    key.serializer: org.apache.kafka.common.serialization.StringSerializer
    value.serializer: org.apache.kafka.common.serialization.StringSerializer
# ===================================================================
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# to have type-safe configuration, like in the JHipsterProperties above
#
# More documentation is available at:
# https://www.jhipster.tech/common-application-properties/
# ===================================================================

application:
  public-account-registration: false
  thumbnails:
    image-storage: DISK
    image-base-dir: target/images
    image-creation-aot: false
  web:
    content-security-policy: "default-src 'self'; frame-src 'self' https://player.vimeo.com https://*.vimeo.com data:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://storage.googleapis.com https://buttons.github.io https://player.vimeo.com https://*.vimeocdn.com; style-src 'self' https://fonts.googleapis.com 'unsafe-inline'; img-src 'self' https://picsum.photos https://*.picsum.photos https://*.vimeocdn.com https://bonlimousin-dev.s3.eu-north-1.amazonaws.com https://bonlimousin.s3.eu-north-1.amazonaws.com data:; font-src 'self' https://fonts.gstatic.com data:"
    feature-policy: "geolocation 'none'; midi 'none'; sync-xhr 'none'; microphone 'none'; camera 'none'; magnetometer 'none'; gyroscope 'none'; speaker 'none'; fullscreen 'self'; payment 'none'"
  bff:
    client:
      username: gatewayclient
      password: user
    resource:
      # bonContentService
      boncontentservicekafka:
        name: bonContentService
        url:
      fragment:
        name: bonContentService
        url:
      localized:
        name: bonContentService
        url:
      story:
        name: bonContentService
        url:
      tag:
        name: bonContentService
        url:
      # bonLivestockService
      bonlivestockservicekafka:
        name: bonLivestockService
        url:
      cattle:
        name: bonLivestockService
        url:
      matrilineality:
        name: bonLivestockService
        url:
      note:
        name: bonLivestockService
        url:
      pasture:
        name: bonLivestockService
        url:
      photo:
        name: bonLivestockService
        url:
      # bonReplicaService
      blup:
        name: bonReplicaService
        url:
      bonreplicaservicekafka:
        name: bonReplicaService
        url:
      bovine:
        name: bonReplicaService
        url:
      journalentry:
        name: bonReplicaService
        url:
      sourcefile:
        name: bonReplicaService
        url:
